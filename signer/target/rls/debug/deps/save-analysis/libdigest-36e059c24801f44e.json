{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54],"program":"/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","digest","/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=36e059c24801f44e","-C","extra-filename=-36e059c24801f44e","--out-dir","/home/k2/Workbench/jade-signer/target/rls/debug/deps","-L","dependency=/home/k2/Workbench/jade-signer/target/rls/debug/deps","--extern","generic_array=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libgeneric_array-9c9dc3188f0b055d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,100,105,103,101,115,116,45,51,54,101,48,53,57,99,50,52,56,48,49,102,52,52,101,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"digest","disambiguator":[7985172480851928871,17706637359348758319]},"crate_root":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src","external_crates":[{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[4460275713293065345,16951895692468253576]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[11180861269583930402,7218748977825450810]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[4642033898704731799,9729154345420223309]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[15367302505379194125,4364600630425952605]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[9619147783140956088,642700011998169051]}}],"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3600,"line_start":1,"line_end":98,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":518,"byte_end":535,"line_start":19,"line_end":19,"column_start":18,"column_end":35},"alias_span":null,"name":"InvalidOutputSize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":537,"byte_end":556,"line_start":19,"line_end":19,"column_start":37,"column_end":56},"alias_span":null,"name":"InvalidBufferLength","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":575,"byte_end":581,"line_start":20,"line_end":20,"column_start":17,"column_end":23},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3600,"line_start":1,"line_end":98,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.7.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":44},{"krate":0,"index":56},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":130},{"krate":0,"index":162},{"krate":0,"index":160},{"krate":0,"index":156},{"krate":0,"index":152},{"krate":0,"index":148},{"krate":0,"index":144},{"krate":0,"index":140},{"krate":0,"index":136},{"krate":0,"index":132},{"krate":0,"index":78},{"krate":0,"index":86},{"krate":0,"index":90},{"krate":0,"index":96}],"decl_id":null,"docs":" This crate provides traits for describing funcionality of cryptographic hash\n functions.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":307,"byte_end":313,"line_start":7,"line_end":7,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":3996,"byte_end":4002,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest: Input + BlockInput + FixedOutput + Default","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40}],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4091,"byte_end":4094,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"fn () -> Self","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Create new hasher instance\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4250,"byte_end":4255,"line_start":20,"line_end":20,"column_start":8,"column_end":13},"name":"input","qualname":"::digest::Digest::input","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4400,"byte_end":4406,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"result","qualname":"::digest::Digest::result","value":"fn (self) -> Output<Self::OutputSize>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4762,"byte_end":4768,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"fn (data: &[u8]) -> Output<Self::OutputSize>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Convenience function to compute hash of the `data`. It will handle\n hasher creation, data feeding and finalization.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4745,"byte_end":4754,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":5064,"byte_end":5074,"line_start":47,"line_end":47,"column_start":8,"column_end":18},"name":"digest_str","qualname":"::digest::Digest::digest_str","value":"fn (str: &str) -> Output<Self::OutputSize>","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":" Convenience function to compute hash of the string. It's equivalent to\n `digest(input_string.as_bytes())`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":5047,"byte_end":5056,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6418,"byte_end":6435,"line_start":7,"line_end":7,"column_start":12,"column_end":29},"name":"InvalidOutputSize","qualname":"::errors::InvalidOutputSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable hasher initialization\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6407,"byte_end":6436,"line_start":7,"line_end":7,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6534,"byte_end":6553,"line_start":11,"line_end":11,"column_start":12,"column_end":31},"name":"InvalidBufferLength","qualname":"::errors::InvalidBufferLength","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable hasher result\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6523,"byte_end":6554,"line_start":11,"line_end":11,"column_start":1,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":752,"byte_end":757,"line_start":26,"line_end":26,"column_start":11,"column_end":16},"name":"Input","qualname":"::Input","value":"Input","parent":null,"children":[{"krate":0,"index":66}],"decl_id":null,"docs":" Trait for processing input data\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":872,"byte_end":879,"line_start":29,"line_end":29,"column_start":8,"column_end":15},"name":"process","qualname":"::Input::process","value":"fn (&mut self, input: &[u8]) -> ()","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Digest input data. This method can be called repeatedly\n for use with streaming messages.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1075,"byte_end":1085,"line_start":34,"line_end":34,"column_start":11,"column_end":21},"name":"BlockInput","qualname":"::BlockInput","value":"BlockInput","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" Trait to indicate that digest function processes data in blocks of size\n `BlockSize`. Main usage of this trait is for implementing HMAC generically.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1097,"byte_end":1106,"line_start":35,"line_end":35,"column_start":10,"column_end":19},"name":"BlockSize","qualname":"::BlockInput::BlockSize","value":"type BlockSize: ArrayLength<u8>;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1196,"byte_end":1207,"line_start":39,"line_end":39,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::FixedOutput","value":"FixedOutput","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76}],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1219,"byte_end":1229,"line_start":40,"line_end":40,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::FixedOutput::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1330,"byte_end":1342,"line_start":43,"line_end":43,"column_start":8,"column_end":20},"name":"fixed_result","qualname":"::FixedOutput::fixed_result","value":"fn (self) -> GenericArray<u8, Self::OutputSize>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Retrieve the digest result. This method consumes digest instance.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1525,"byte_end":1538,"line_start":48,"line_end":48,"column_start":12,"column_end":25},"name":"InvalidLength","qualname":"::InvalidLength","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable digest output\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1514,"byte_end":1539,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1514,"byte_end":1539,"line_start":48,"line_end":48,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1612,"byte_end":1626,"line_start":51,"line_end":51,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::VariableOutput","value":"VariableOutput: core::marker::Sized","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84}],"decl_id":null,"docs":" Trait for returning digest result with the varaible size\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1883,"byte_end":1886,"line_start":55,"line_end":55,"column_start":8,"column_end":11},"name":"new","qualname":"::VariableOutput::new","value":"fn (output_size: usize) -> Result<Self, InvalidLength>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Create new hasher instance with given output size. Will return\n `Err(InvalidLength)` in case if hasher can not work with the given\n output size. Will always return an error if output size equals to zero.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2023,"byte_end":2034,"line_start":58,"line_end":58,"column_start":8,"column_end":19},"name":"output_size","qualname":"::VariableOutput::output_size","value":"fn (&self) -> usize","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Get output size of the hasher instance provided to the `new` method\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2261,"byte_end":2276,"line_start":63,"line_end":63,"column_start":8,"column_end":23},"name":"variable_result","qualname":"::VariableOutput::variable_result","value":"fn (self, buffer: &mut [u8]) -> Result<&[u8], InvalidLength>","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":" Retrieve the digest result into provided buffer. Length of the buffer\n must be equal to output size provided to the `new` method, otherwise\n `Err(InvalidLength)` will be returned\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2471,"byte_end":2480,"line_start":68,"line_end":68,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::XofReader","value":"XofReader","parent":null,"children":[{"krate":0,"index":88}],"decl_id":null,"docs":" Trait for decribing readers which are used to extract extendable output\n from the resulting state of hash function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2570,"byte_end":2574,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"read","qualname":"::XofReader::read","value":"fn (&mut self, buffer: &mut [u8]) -> ()","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called unlimited number of times.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2819,"byte_end":2835,"line_start":76,"line_end":76,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::ExtendableOutput","value":"ExtendableOutput","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94}],"decl_id":null,"docs":" Trait which describes extendable output (XOF) of hash functions. Using this\n trait you first need to get structure which implements `XofReader`, using\n which you can read extendable output.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2847,"byte_end":2853,"line_start":77,"line_end":77,"column_start":10,"column_end":16},"name":"Reader","qualname":"::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2927,"byte_end":2937,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"xof_result","qualname":"::ExtendableOutput::xof_result","value":"fn (self) -> Self::Reader","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Finalize hash function and return XOF reader\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":6252,"byte_end":6253,"line_start":86,"line_end":86,"column_start":64,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6578,"byte_end":6595,"line_start":13,"line_end":13,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6731,"byte_end":6750,"line_start":19,"line_end":19,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4004,"byte_end":4009,"line_start":12,"line_end":12,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":64},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4012,"byte_end":4022,"line_start":12,"line_end":12,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4025,"byte_end":4036,"line_start":12,"line_end":12,"column_start":40,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":4039,"byte_end":4046,"line_start":12,"line_end":12,"column_start":54,"column_end":61},"kind":"SuperTrait","from":{"krate":1,"index":2612},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,100,105,103,101,115,116,46,114,115],"byte_start":6252,"byte_end":6253,"line_start":86,"line_end":86,"column_start":64,"column_end":65},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":21},"to":{"krate":0,"index":30}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6578,"byte_end":6595,"line_start":13,"line_end":13,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":98},"to":{"krate":1,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":6731,"byte_end":6750,"line_start":19,"line_end":19,"column_start":23,"column_end":42},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":114},"to":{"krate":1,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,100,105,103,101,115,116,45,48,46,55,46,54,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1642,"byte_end":1647,"line_start":51,"line_end":51,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":1686},"to":{"krate":0,"index":78}}]}