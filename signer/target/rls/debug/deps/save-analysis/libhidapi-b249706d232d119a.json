{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49],"program":"/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hidapi","/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=b249706d232d119a","-C","extra-filename=-b249706d232d119a","--out-dir","/home/k2/Workbench/jade-signer/target/rls/debug/deps","-L","dependency=/home/k2/Workbench/jade-signer/target/rls/debug/deps","--extern","libc=/home/k2/Workbench/jade-signer/target/rls/debug/deps/liblibc-c52c5ac48032aec9.rmeta","--cap-lints","allow","-L","native=/usr/lib/x86_64-linux-gnu","-L","native=/home/k2/Workbench/jade-signer/target/rls/debug/build/hidapi-72dc49c83185e4a3/out","-l","usb-1.0","-l","static=hidapi","--error-format=json","--sysroot","/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,104,105,100,97,112,105,45,98,50,52,57,55,48,54,100,50,51,50,100,49,49,57,97,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"hidapi","disambiguator":[17718318649716133024,2770641469991313961]},"crate_root":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src","external_crates":[{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7643654914076001483,12823312228256817667]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4460275713293065345,16951895692468253576]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11180861269583930402,7218748977825450810]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4642033898704731799,9729154345420223309]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12818274104326731107,682062526801359143]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12755702926841618597,12055052820604553981]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[1437492519896548358,983587994810570921]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[15755932282147130284,14837425147787014863]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[14848937618377221952,4542086914855755700]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[1423741341053305533,4588337216884661599]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","num":11,"id":{"name":"libc","disambiguator":[1828997127759121944,2360046500166115577]}}],"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":289,"byte_end":14506,"line_start":7,"line_end":408,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":289,"byte_end":14506,"line_start":7,"line_end":408,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/hidapi-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":112},{"krate":0,"index":118},{"krate":0,"index":114},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":86}],"decl_id":null,"docs":" This crate provides a rust abstraction over the features of the C library\n hidapi by [signal11](https://github.com/signal11/hidapi).","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1485,"byte_end":1493,"line_start":52,"line_end":52,"column_start":10,"column_end":18},"name":"HidError","qualname":"::HidError","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1519,"byte_end":1528,"line_start":53,"line_end":53,"column_start":10,"column_end":19},"name":"HidResult","qualname":"::HidResult","value":"Result<T, HidError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1714,"byte_end":1720,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"HidApi","qualname":"::HidApi","value":"HidApi {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" Object for handling hidapi context and implementing RAII for it.\n Only one instance can exist at a time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1852,"byte_end":1855,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<HidApi>::new","value":"fn () -> HidResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Initializes the HID\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2458,"byte_end":2473,"line_start":87,"line_end":87,"column_start":12,"column_end":27},"name":"refresh_devices","qualname":"<HidApi>::refresh_devices","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Refresh devices list and information about them (to access them use\n `devices()` method)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3223,"byte_end":3230,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"devices","qualname":"<HidApi>::devices","value":"fn (&self) -> Vec<HidDeviceInfo>","parent":null,"children":[],"decl_id":null,"docs":" Returns list of objects containing information about connected devices\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3380,"byte_end":3384,"line_start":118,"line_end":118,"column_start":12,"column_end":16},"name":"open","qualname":"<HidApi>::open","value":"fn (&self, vid: u16, pid: u16) -> HidResult<HidDevice>","parent":null,"children":[],"decl_id":null,"docs":" Open a HID device using a Vendor ID (VID) and Product ID (PID)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3848,"byte_end":3859,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"open_serial","qualname":"<HidApi>::open_serial","value":"fn (&self, vid: u16, pid: u16, sn: &str) -> HidResult<HidDevice>","parent":null,"children":[],"decl_id":null,"docs":" Open a HID device using a Vendor ID (VID), Product ID (PID) and\n a serial number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4397,"byte_end":4406,"line_start":147,"line_end":147,"column_start":12,"column_end":21},"name":"open_path","qualname":"<HidApi>::open_path","value":"fn (&self, device_path: &str) -> HidResult<HidDevice>","parent":null,"children":[],"decl_id":null,"docs":" The path name be determined by calling hid_enumerate(), or a\n platform-specific path name can be used (eg: /dev/hidraw0 on Linux).\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6336,"byte_end":6349,"line_start":210,"line_end":210,"column_start":12,"column_end":25},"name":"HidDeviceInfo","qualname":"::HidDeviceInfo","value":"HidDeviceInfo { path, vendor_id, product_id, serial_number, release_number, manufacturer_string, product_string, usage_page, usage, interface_number }","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":117}],"decl_id":null,"docs":" Storage for device related information\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":99},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6360,"byte_end":6364,"line_start":211,"line_end":211,"column_start":9,"column_end":13},"name":"path","qualname":"::HidDeviceInfo::path","value":"std::string::String","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":101},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6382,"byte_end":6391,"line_start":212,"line_end":212,"column_start":9,"column_end":18},"name":"vendor_id","qualname":"::HidDeviceInfo::vendor_id","value":"u16","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":103},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6406,"byte_end":6416,"line_start":213,"line_end":213,"column_start":9,"column_end":19},"name":"product_id","qualname":"::HidDeviceInfo::product_id","value":"u16","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":105},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6431,"byte_end":6444,"line_start":214,"line_end":214,"column_start":9,"column_end":22},"name":"serial_number","qualname":"::HidDeviceInfo::serial_number","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":107},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6470,"byte_end":6484,"line_start":215,"line_end":215,"column_start":9,"column_end":23},"name":"release_number","qualname":"::HidDeviceInfo::release_number","value":"u16","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":109},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6499,"byte_end":6518,"line_start":216,"line_end":216,"column_start":9,"column_end":28},"name":"manufacturer_string","qualname":"::HidDeviceInfo::manufacturer_string","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":111},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6544,"byte_end":6558,"line_start":217,"line_end":217,"column_start":9,"column_end":23},"name":"product_string","qualname":"::HidDeviceInfo::product_string","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":113},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6584,"byte_end":6594,"line_start":218,"line_end":218,"column_start":9,"column_end":19},"name":"usage_page","qualname":"::HidDeviceInfo::usage_page","value":"u16","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":115},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6609,"byte_end":6614,"line_start":219,"line_end":219,"column_start":9,"column_end":14},"name":"usage","qualname":"::HidDeviceInfo::usage","value":"u16","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":117},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6629,"byte_end":6645,"line_start":220,"line_end":220,"column_start":9,"column_end":25},"name":"interface_number","qualname":"::HidDeviceInfo::interface_number","value":"i32","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6702,"byte_end":6711,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"HidDevice","qualname":"::HidDevice","value":"HidDevice {  }","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" Object for accessing HID device\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7845,"byte_end":7856,"line_start":261,"line_end":261,"column_start":12,"column_end":23},"name":"check_error","qualname":"<HidDevice<'a>>::check_error","value":"fn (&self) -> HidResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Get a string describing the last error which occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8741,"byte_end":8746,"line_start":278,"line_end":278,"column_start":12,"column_end":17},"name":"write","qualname":"<HidDevice<'a>>::write","value":"fn (&self, data: &[u8]) -> HidResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" The first byte of `data` must contain the Report ID. For\n devices which only support a single report, this must be set\n to 0x0. The remaining bytes contain the report data. Since\n the Report ID is mandatory, calls to `write()` will always\n contain one more byte than the report contains. For example,\n if a hid report is 16 bytes long, 17 bytes must be passed to\n `write()`, the Report ID (or 0x0, for devices with a\n single report), followed by the report data (16 bytes). In\n this example, the length passed in would be 17.\n `write()` will send the data on the first OUT endpoint, if\n one exists. If it does not, it will send the data through\n the Control Endpoint (Endpoint 0).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9221,"byte_end":9225,"line_start":289,"line_end":289,"column_start":12,"column_end":16},"name":"read","qualname":"<HidDevice<'a>>::read","value":"fn (&self, buf: &mut [u8]) -> HidResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" Input reports are returned to the host through the 'INTERRUPT IN'\n endpoint. The first byte will contain the Report number if the device\n uses numbered reports.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9670,"byte_end":9682,"line_start":298,"line_end":298,"column_start":12,"column_end":24},"name":"read_timeout","qualname":"<HidDevice<'a>>::read_timeout","value":"fn (&self, buf: &mut [u8], timeout: i32) -> HidResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" Input reports are returned to the host through the 'INTERRUPT IN'\n endpoint. The first byte will contain the Report number if the device\n uses numbered reports. Timeout measured in milliseconds, set -1 for\n blocking wait.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10797,"byte_end":10816,"line_start":319,"line_end":319,"column_start":12,"column_end":31},"name":"send_feature_report","qualname":"<HidDevice<'a>>::send_feature_report","value":"fn (&self, data: &[u8]) -> HidResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a Feature report to the device.\n Feature reports are sent over the Control endpoint as a\n Set_Report transfer.  The first byte of `data` must contain the\n 'Report ID'. For devices which only support a single report, this must\n be set to 0x0. The remaining bytes contain the report data. Since the\n 'Report ID' is mandatory, calls to `send_feature_report()` will always\n contain one more byte than the report contains. For example, if a hid\n report is 16 bytes long, 17 bytes must be passed to\n `send_feature_report()`: 'the Report ID' (or 0x0, for devices which\n do not use numbered reports), followed by the report data (16 bytes).\n In this example, the length passed in would be 17.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11496,"byte_end":11514,"line_start":337,"line_end":337,"column_start":12,"column_end":30},"name":"get_feature_report","qualname":"<HidDevice<'a>>::get_feature_report","value":"fn (&self, buf: &mut [u8]) -> HidResult<usize>","parent":null,"children":[],"decl_id":null,"docs":" Set the first byte of `data` to the 'Report ID' of the report to be read.\n Upon return, the first byte will still contain the Report ID, and the\n report data will start in data[1].\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12087,"byte_end":12104,"line_start":349,"line_end":349,"column_start":12,"column_end":29},"name":"set_blocking_mode","qualname":"<HidDevice<'a>>::set_blocking_mode","value":"fn (&self, blocking: bool) -> HidResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Set the device handle to be in blocking or in non-blocking mode. In\n non-blocking mode calls to `read()` will return immediately with an empty\n slice if there is no data to be read. In blocking mode, `read()` will\n wait (block) until there is data to read before returning.\n Modes can be changed at any time.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12465,"byte_end":12488,"line_start":361,"line_end":361,"column_start":12,"column_end":35},"name":"get_manufacturer_string","qualname":"<HidDevice<'a>>::get_manufacturer_string","value":"fn (&self) -> HidResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Get The Manufacturer String from a HID device.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12983,"byte_end":13001,"line_start":373,"line_end":373,"column_start":12,"column_end":30},"name":"get_product_string","qualname":"<HidDevice<'a>>::get_product_string","value":"fn (&self) -> HidResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Get The Manufacturer String from a HID device.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13482,"byte_end":13506,"line_start":385,"line_end":385,"column_start":12,"column_end":36},"name":"get_serial_number_string","qualname":"<HidDevice<'a>>::get_serial_number_string","value":"fn (&self) -> HidResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Get The Serial Number String from a HID device.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14016,"byte_end":14034,"line_start":397,"line_end":397,"column_start":12,"column_end":30},"name":"get_indexed_string","qualname":"<HidDevice<'a>>::get_indexed_string","value":"fn (&self, index: i32) -> HidResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Get a string from a HID device, based on its string index.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1804,"byte_end":1810,"line_start":64,"line_end":64,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4797,"byte_end":4803,"line_start":161,"line_end":161,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6881,"byte_end":6890,"line_start":230,"line_end":230,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6993,"byte_end":7002,"line_start":236,"line_end":236,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1804,"byte_end":1810,"line_start":64,"line_end":64,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4797,"byte_end":4803,"line_start":161,"line_end":161,"column_start":15,"column_end":21},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6881,"byte_end":6890,"line_start":230,"line_end":230,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":80},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,105,100,97,112,105,45,48,46,52,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6993,"byte_end":7002,"line_start":236,"line_end":236,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}}]}