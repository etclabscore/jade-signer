{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50],"program":"/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bech32","/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=f06ea8920bf52519","-C","extra-filename=-f06ea8920bf52519","--out-dir","/home/k2/Workbench/jade-signer/target/rls/debug/deps","-L","dependency=/home/k2/Workbench/jade-signer/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,101,99,104,51,50,45,102,48,54,101,97,56,57,50,48,98,102,53,50,53,49,57,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"bech32","disambiguator":[8292563279823966237,10861070972065784336]},"crate_root":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src","external_crates":[{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7643654914076001483,12823312228256817667]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4460275713293065345,16951895692468253576]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11180861269583930402,7218748977825450810]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4642033898704731799,9729154345420223309]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12818274104326731107,682062526801359143]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12755702926841618597,12055052820604553981]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[1437492519896548358,983587994810570921]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[15755932282147130284,14837425147787014863]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[14848937618377221952,4542086914855755700]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[1423741341053305533,4588337216884661599]}}],"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1110,"byte_end":16603,"line_start":21,"line_end":496,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1110,"byte_end":16603,"line_start":21,"line_end":496,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":66},{"krate":0,"index":76},{"krate":0,"index":72},{"krate":0,"index":68},{"krate":0,"index":20},{"krate":0,"index":30},{"krate":0,"index":34},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":82},{"krate":0,"index":98},{"krate":0,"index":94},{"krate":0,"index":88},{"krate":0,"index":84},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":64}],"decl_id":null,"docs":" Encoding and decoding Bech32 format","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1921,"byte_end":1943,"line_start":43,"line_end":43,"column_start":1,"column_end":23}},{"value":"deny(non_upper_case_globals)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1944,"byte_end":1976,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"deny(non_camel_case_types)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1977,"byte_end":2007,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"deny(non_snake_case)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2008,"byte_end":2032,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"deny(unused_mut)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2033,"byte_end":2053,"line_start":47,"line_end":47,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2283,"byte_end":2289,"line_start":56,"line_end":56,"column_start":12,"column_end":18},"name":"Bech32","qualname":"::Bech32","value":"Bech32 {  }","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" Grouping structure for the human-readable part and the data part\n of decoded Bech32 string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2490,"byte_end":2493,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<Bech32>::new","value":"fn (hrp: String, data: Vec<u8>) -> Result<Bech32, Error>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Bech32` struct if the result can be encoded as a bech32 string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2864,"byte_end":2867,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"hrp","qualname":"<Bech32>::hrp","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the human readable part\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2992,"byte_end":2996,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"data","qualname":"<Bech32>::data","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the data part as `[u8]` but only using 5 bits per byte\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3108,"byte_end":3118,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<Bech32>::into_parts","value":"fn (self) -> (String, Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Destructures the `Bech32` struct into its parts\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":35},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8753,"byte_end":8769,"line_start":279,"line_end":279,"column_start":5,"column_end":21},"name":"MissingSeparator","qualname":"::Error::MissingSeparator","value":"Error::MissingSeparator","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" String does not contain the separator character\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":37},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8832,"byte_end":8847,"line_start":281,"line_end":281,"column_start":5,"column_end":20},"name":"InvalidChecksum","qualname":"::Error::InvalidChecksum","value":"Error::InvalidChecksum","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The checksum does not match the rest of the data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":39},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8918,"byte_end":8931,"line_start":283,"line_end":283,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The data or human-readable part is too long or too short\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":41},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8999,"byte_end":9010,"line_start":285,"line_end":285,"column_start":5,"column_end":16},"name":"InvalidChar","qualname":"::Error::InvalidChar","value":"Error::InvalidChar(u8)","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Some part of the string contains an invalid character\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":45},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9071,"byte_end":9082,"line_start":287,"line_end":287,"column_start":5,"column_end":16},"name":"InvalidData","qualname":"::Error::InvalidData","value":"Error::InvalidData(u8)","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Some part of the data has an invalid value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":49},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9149,"byte_end":9163,"line_start":289,"line_end":289,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::Error::InvalidPadding","value":"Error::InvalidPadding","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The bit conversion failed due to a padding issue\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":51},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9214,"byte_end":9223,"line_start":291,"line_end":291,"column_start":5,"column_end":14},"name":"MixedCase","qualname":"::Error::MixedCase","value":"Error::MixedCase","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" The whole string must be of one case\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8685,"byte_end":8690,"line_start":277,"line_end":277,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"Error::{MissingSeparator, InvalidChecksum, InvalidLength, InvalidChar, InvalidData, InvalidPadding, MixedCase}","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Error types for Bech32 encoding / decoding\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8676,"byte_end":9226,"line_start":277,"line_end":292,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10768,"byte_end":10780,"line_start":335,"line_end":335,"column_start":8,"column_end":20},"name":"convert_bits","qualname":"::convert_bits","value":"fn (data: &[u8], from: u32, to: u32, pad: bool) -> Result<Vec<u8>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert between bit sizes","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2384,"byte_end":2390,"line_start":63,"line_end":63,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3204,"byte_end":3210,"line_start":92,"line_end":92,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3648,"byte_end":3654,"line_start":108,"line_end":108,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9250,"byte_end":9255,"line_start":294,"line_end":294,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9917,"byte_end":9922,"line_start":308,"line_end":308,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2384,"byte_end":2390,"line_start":63,"line_end":63,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":66},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3204,"byte_end":3210,"line_start":92,"line_end":92,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":66},"to":{"krate":2,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3648,"byte_end":3654,"line_start":108,"line_end":108,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":66},"to":{"krate":2,"index":7280}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9250,"byte_end":9255,"line_start":294,"line_end":294,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":82},"to":{"krate":2,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,101,99,104,51,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9917,"byte_end":9922,"line_start":308,"line_end":308,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":82},"to":{"krate":1,"index":2466}}]}