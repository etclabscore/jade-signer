{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49],"program":"/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bindgen","/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"env_logger\"","--cfg","feature=\"log\"","--cfg","feature=\"logging\"","-C","metadata=9090d03c26fe5ad0","-C","extra-filename=-9090d03c26fe5ad0","--out-dir","/home/k2/Workbench/jade-signer/target/rls/debug/deps","-L","dependency=/home/k2/Workbench/jade-signer/target/rls/debug/deps","--extern","aster=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libaster-65fcaa64269071f7.rlib","--extern","cexpr=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libcexpr-6cb74bfaa64ea56d.rlib","--extern","cfg_if=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libcfg_if-7046494b599724cf.rlib","--extern","clang_sys=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libclang_sys-631403b76bcaea32.rlib","--extern","clap=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libclap-a594489e6ea413b9.rlib","--extern","env_logger=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libenv_logger-095b8700cab46a63.rlib","--extern","lazy_static=/home/k2/Workbench/jade-signer/target/rls/debug/deps/liblazy_static-8aa435cdbe22d66a.rlib","--extern","log=/home/k2/Workbench/jade-signer/target/rls/debug/deps/liblog-06d5c715fbab6d64.rlib","--extern","peeking_take_while=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libpeeking_take_while-ca21d4735f2a4c43.rlib","--extern","quasi=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libquasi-d01b7782295cc7c4.rlib","--extern","regex=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libregex-a74a1dd0078a0f39.rlib","--extern","syntex_syntax=/home/k2/Workbench/jade-signer/target/rls/debug/deps/libsyntex_syntax-339cce33e8635b63.rlib","--cap-lints","allow","--error-format=json","--sysroot","/home/k2/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,105,110,100,103,101,110,45,57,48,57,48,100,48,51,99,50,54,102,101,53,97,100,48,46,114,108,105,98]},"prelude":{"crate_id":{"name":"bindgen","disambiguator":[5821102567567967533,14684653491507057849]},"crate_root":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src","external_crates":[{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7643654914076001483,12823312228256817667]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4460275713293065345,16951895692468253576]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[11180861269583930402,7218748977825450810]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4642033898704731799,9729154345420223309]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12818274104326731107,682062526801359143]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12755702926841618597,12055052820604553981]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[1437492519896548358,983587994810570921]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[15755932282147130284,14837425147787014863]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[14848937618377221952,4542086914855755700]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[1423741341053305533,4588337216884661599]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":11,"id":{"name":"cfg_if","disambiguator":[674446661888682822,8448771253799059100]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":12,"id":{"name":"cexpr","disambiguator":[17409482052120806701,1427519382423896444]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":13,"id":{"name":"nom","disambiguator":[7060031238226210894,16205927082171123233]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":14,"id":{"name":"memchr","disambiguator":[13304501652503520151,8992020719647711100]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":15,"id":{"name":"libc","disambiguator":[15679647890421436773,3919944383526361483]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":16,"id":{"name":"syntex_syntax","disambiguator":[18318105901937711492,15360180214698668567]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":17,"id":{"name":"rustc_serialize","disambiguator":[14904794063017556553,17922159321141515432]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":18,"id":{"name":"log","disambiguator":[10548541784774526043,7572632900015620032]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":19,"id":{"name":"log","disambiguator":[5505663419576136868,15384693875817400295]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":20,"id":{"name":"bitflags","disambiguator":[2295133316692800882,7101317027624347267]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":21,"id":{"name":"syntex_errors","disambiguator":[4783941790981171067,2943732641695397520]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":22,"id":{"name":"term","disambiguator":[17794764949288937443,7196392681233458582]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":23,"id":{"name":"unicode_xid","disambiguator":[4768318442711649852,1498435334549648986]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":24,"id":{"name":"syntex_pos","disambiguator":[12614180078672877446,12209661055543206059]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":25,"id":{"name":"aster","disambiguator":[12746017754956235544,14085159519301604739]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":26,"id":{"name":"quasi","disambiguator":[7323032087155909536,14003743295664734827]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":27,"id":{"name":"clang_sys","disambiguator":[10573641667316338485,7224732823495499250]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":28,"id":{"name":"glob","disambiguator":[15678240195049164383,8144492995313817978]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":29,"id":{"name":"libloading","disambiguator":[14448055966772019570,3239056687255825059]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":30,"id":{"name":"lazy_static","disambiguator":[4632282291239013638,7454143970243275617]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":31,"id":{"name":"peeking_take_while","disambiguator":[12541165338062972444,17962560536776325163]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":32,"id":{"name":"regex","disambiguator":[5405840370815224903,9967117330765192502]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":33,"id":{"name":"aho_corasick","disambiguator":[4481874126696017346,16562735461157006723]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":34,"id":{"name":"memchr","disambiguator":[7760613079334697186,14379884973092671410]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":35,"id":{"name":"thread_local","disambiguator":[2712980658954477250,4765069857802271273]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":36,"id":{"name":"regex_syntax","disambiguator":[15754265092380727692,18069064929921604423]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":37,"id":{"name":"ucd_util","disambiguator":[3523772180358666659,3684700904630206819]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":38,"id":{"name":"utf8_ranges","disambiguator":[16645518126839411842,11495478623791266074]}},{"file_name":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","num":39,"id":{"name":"lazy_static","disambiguator":[11805013210144365320,6771253522862084539]}}],"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":47322,"line_start":1,"line_end":1448,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3520},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503278,"byte_end":503303,"line_start":3,"line_end":3,"column_start":23,"column_end":48},"alias_span":null,"name":"EnumVariantCustomBehavior","value":"","parent":{"krate":0,"index":2780}},{"kind":"Use","ref_id":{"krate":0,"index":3554},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503305,"byte_end":503321,"line_start":3,"line_end":3,"column_start":50,"column_end":66},"alias_span":null,"name":"EnumVariantValue","value":"","parent":{"krate":0,"index":2780}},{"kind":"Use","ref_id":{"krate":0,"index":3644},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503341,"byte_end":503348,"line_start":4,"line_end":4,"column_start":18,"column_end":25},"alias_span":null,"name":"IntKind","value":"","parent":{"krate":0,"index":2780}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":47322,"line_start":1,"line_end":1448,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":434},{"krate":0,"index":2704},{"krate":0,"index":2736},{"krate":0,"index":2760},{"krate":0,"index":2780},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2834},{"krate":0,"index":2840},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2856},{"krate":0,"index":2858},{"krate":0,"index":2860},{"krate":0,"index":5086},{"krate":0,"index":5092},{"krate":0,"index":5088},{"krate":0,"index":2862},{"krate":0,"index":2868},{"krate":0,"index":5096},{"krate":0,"index":5102},{"krate":0,"index":5098},{"krate":0,"index":2872},{"krate":0,"index":2874},{"krate":0,"index":5106},{"krate":0,"index":5108},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2970},{"krate":0,"index":5112},{"krate":0,"index":5136},{"krate":0,"index":5134},{"krate":0,"index":5130},{"krate":0,"index":5126},{"krate":0,"index":5122},{"krate":0,"index":5118},{"krate":0,"index":5114},{"krate":0,"index":2974},{"krate":0,"index":5160},{"krate":0,"index":5162},{"krate":0,"index":2976},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2996},{"krate":0,"index":5166},{"krate":0,"index":5168},{"krate":0,"index":3002}],"decl_id":null,"docs":" Generate Rust bindings for C and C++ libraries.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":251,"byte_end":273,"line_start":8,"line_end":8,"column_start":1,"column_end":23}},{"value":"deny(unused_extern_crates)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":296,"byte_end":326,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"allow(deprecated)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":487,"byte_end":508,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"allow(non_upper_case_globals)","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":597,"byte_end":630,"line_start":18,"line_end":18,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":3004},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":48717,"byte_end":48723,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::clang::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":885}],"decl_id":null,"docs":" A cursor into the Clang AST, pointing to an AST node.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":48706,"byte_end":48744,"line_start":21,"line_end":23,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49254,"byte_end":49257,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"usr","qualname":"<Cursor>::usr","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the Unified Symbol Resolution for this cursor's referent, if\n available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49479,"byte_end":49493,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"is_declaration","qualname":"<Cursor>::is_declaration","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a declaration?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49638,"byte_end":49642,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"null","qualname":"<Cursor>::null","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the null cursor, which has no referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49796,"byte_end":49804,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"spelling","qualname":"<Cursor>::spelling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get this cursor's referent's spelling.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":50105,"byte_end":50117,"line_start":67,"line_end":67,"column_start":12,"column_end":24},"name":"display_name","qualname":"<Cursor>::display_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get this cursor's referent's display name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":50287,"byte_end":50295,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"mangling","qualname":"<Cursor>::mangling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get the mangled name of this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":50651,"byte_end":50664,"line_start":82,"line_end":82,"column_start":12,"column_end":25},"name":"cxx_manglings","qualname":"<Cursor>::cxx_manglings","value":"fn (&self) -> Result<Vec<String>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Gets the C++ manglings for this cursor, or an error if the function is\n not loaded or the manglings are not available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":51451,"byte_end":51461,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"is_builtin","qualname":"<Cursor>::is_builtin","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the cursor refers to a built-in definition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":52228,"byte_end":52242,"line_start":127,"line_end":127,"column_start":12,"column_end":26},"name":"lexical_parent","qualname":"<Cursor>::lexical_parent","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the `Cursor` for this cursor's referent's lexical parent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":52571,"byte_end":52595,"line_start":139,"line_end":139,"column_start":12,"column_end":36},"name":"fallible_semantic_parent","qualname":"<Cursor>::fallible_semantic_parent","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's semantic parent, if one is available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":53017,"byte_end":53032,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"semantic_parent","qualname":"<Cursor>::semantic_parent","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's semantic parent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":53407,"byte_end":53424,"line_start":165,"line_end":165,"column_start":12,"column_end":29},"name":"num_template_args","qualname":"<Cursor>::num_template_args","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Return the number of template arguments used by this cursor's referent,\n if the referent is either a template instantiation. Returns `None`\n otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":54715,"byte_end":54731,"line_start":199,"line_end":199,"column_start":12,"column_end":28},"name":"translation_unit","qualname":"<Cursor>::translation_unit","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to this referent's containing translation unit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":55102,"byte_end":55113,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"is_toplevel","qualname":"<Cursor>::is_toplevel","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a top level construct?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":55983,"byte_end":55999,"line_start":231,"line_end":231,"column_start":12,"column_end":28},"name":"is_template_like","qualname":"<Cursor>::is_template_like","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" There are a few kinds of types that we need to treat specially, mainly\n not tracking the type declaration but the location of the cursor, given\n clang doesn't expose a proper declaration for these types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":56305,"byte_end":56309,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"kind","qualname":"<Cursor>::kind","value":"fn (&self) -> CXCursorKind","parent":null,"children":[],"decl_id":null,"docs":" Get the kind of referent this cursor is pointing to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":56424,"byte_end":56437,"line_start":246,"line_end":246,"column_start":12,"column_end":25},"name":"is_definition","qualname":"<Cursor>::is_definition","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is the cursor is a definition\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":56581,"byte_end":56607,"line_start":251,"line_end":251,"column_start":12,"column_end":38},"name":"is_template_specialization","qualname":"<Cursor>::is_template_specialization","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a template specialization?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":56803,"byte_end":56832,"line_start":257,"line_end":257,"column_start":12,"column_end":41},"name":"is_fully_specialized_template","qualname":"<Cursor>::is_fully_specialized_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a fully specialized template specialization without any\n remaining free template arguments?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":57141,"byte_end":57177,"line_start":265,"line_end":265,"column_start":12,"column_end":48},"name":"is_in_non_fully_specialized_template","qualname":"<Cursor>::is_in_non_fully_specialized_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a template specialization that still has remaining free\n template arguments?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":57604,"byte_end":57612,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<Cursor>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing a valid referent?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":57751,"byte_end":57759,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"location","qualname":"<Cursor>::location","value":"fn (&self) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" Get the source location for the referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":57983,"byte_end":57989,"line_start":297,"line_end":297,"column_start":12,"column_end":18},"name":"extent","qualname":"<Cursor>::extent","value":"fn (&self) -> CXSourceRange","parent":null,"children":[],"decl_id":null,"docs":" Get the source location range for the referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":58157,"byte_end":58168,"line_start":302,"line_end":302,"column_start":12,"column_end":23},"name":"raw_comment","qualname":"<Cursor>::raw_comment","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the raw declaration comment for this referent, if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":58416,"byte_end":58423,"line_start":310,"line_end":310,"column_start":12,"column_end":19},"name":"comment","qualname":"<Cursor>::comment","value":"fn (&self) -> Comment","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's parsed comment.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":58616,"byte_end":58624,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"cur_type","qualname":"<Cursor>::cur_type","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":58957,"byte_end":58967,"line_start":330,"line_end":330,"column_start":12,"column_end":22},"name":"definition","qualname":"<Cursor>::definition","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a reference to another type, or is\n a declaration, get the cursor pointing to the referenced type or type of\n the declared thing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":59410,"byte_end":59420,"line_start":346,"line_end":346,"column_start":12,"column_end":22},"name":"referenced","qualname":"<Cursor>::referenced","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is reference type, get the cursor\n pointing to the referenced type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":59890,"byte_end":59899,"line_start":361,"line_end":361,"column_start":12,"column_end":21},"name":"canonical","qualname":"<Cursor>::canonical","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical cursor for this referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":60247,"byte_end":60258,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"specialized","qualname":"<Cursor>::specialized","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor points to either a template specialization or a\n template instantiation, get a cursor pointing to the template definition\n that is being specialized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":60650,"byte_end":60663,"line_start":383,"line_end":383,"column_start":12,"column_end":25},"name":"template_kind","qualname":"<Cursor>::template_kind","value":"fn (&self) -> CXCursorKind","parent":null,"children":[],"decl_id":null,"docs":" Assuming that this cursor's referent is a template declaration, get the\n kind of cursor that would be generated for its specializations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":60888,"byte_end":60893,"line_start":390,"line_end":390,"column_start":12,"column_end":17},"name":"visit","qualname":"<Cursor>::visit","value":"fn <Visitor> (&self, mut visitor: Visitor) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Traverse this cursor's referent and its children.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":61279,"byte_end":61295,"line_start":401,"line_end":401,"column_start":12,"column_end":28},"name":"collect_children","qualname":"<Cursor>::collect_children","value":"fn (&self) -> Vec<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Collect all of this cursor's children into a vec and return them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":61535,"byte_end":61547,"line_start":411,"line_end":411,"column_start":12,"column_end":24},"name":"has_children","qualname":"<Cursor>::has_children","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this cursor have any children?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":61796,"byte_end":61821,"line_start":421,"line_end":421,"column_start":12,"column_end":37},"name":"has_at_least_num_children","qualname":"<Cursor>::has_at_least_num_children","value":"fn (&self, n: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this cursor have at least `n` children?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":62312,"byte_end":62327,"line_start":438,"line_end":438,"column_start":12,"column_end":27},"name":"contains_cursor","qualname":"<Cursor>::contains_cursor","value":"fn (&self, kind: CXCursorKind) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given location contains a cursor with the given\n kind in the first level of nesting underneath (doesn't look\n recursively).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":62640,"byte_end":62659,"line_start":452,"line_end":452,"column_start":12,"column_end":31},"name":"is_inlined_function","qualname":"<Cursor>::is_inlined_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent an inlined function?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":62926,"byte_end":62935,"line_start":459,"line_end":459,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<Cursor>::bit_width","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Get the width of this cursor's referent bit field, or `None` if the\n referent is not a bit field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":63216,"byte_end":63225,"line_start":468,"line_end":468,"column_start":12,"column_end":21},"name":"enum_type","qualname":"<Cursor>::enum_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Get the integer representation type used to hold this cursor's referent\n enum type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":63606,"byte_end":63621,"line_start":480,"line_end":480,"column_start":12,"column_end":27},"name":"enum_val_signed","qualname":"<Cursor>::enum_val_signed","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Get the signed constant value for this cursor's enum variant referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":64032,"byte_end":64049,"line_start":493,"line_end":493,"column_start":12,"column_end":29},"name":"enum_val_unsigned","qualname":"<Cursor>::enum_val_unsigned","value":"fn (&self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the unsigned constant value for this cursor's enum variant referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":64413,"byte_end":64425,"line_start":505,"line_end":505,"column_start":12,"column_end":24},"name":"typedef_type","qualname":"<Cursor>::typedef_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a `typedef`, get the `Type` that is\n being aliased.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":64755,"byte_end":64762,"line_start":516,"line_end":516,"column_start":12,"column_end":19},"name":"linkage","qualname":"<Cursor>::linkage","value":"fn (&self) -> CXLinkageKind","parent":null,"children":[],"decl_id":null,"docs":" Get the linkage kind for this cursor's referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":64911,"byte_end":64921,"line_start":521,"line_end":521,"column_start":12,"column_end":22},"name":"visibility","qualname":"<Cursor>::visibility","value":"fn (&self) -> CXVisibilityKind","parent":null,"children":[],"decl_id":null,"docs":" Get the visibility of this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":65237,"byte_end":65241,"line_start":531,"line_end":531,"column_start":12,"column_end":16},"name":"args","qualname":"<Cursor>::args","value":"fn (&self) -> Option<Vec<Cursor>>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a function, return cursors to its\n parameters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":66145,"byte_end":66153,"line_start":559,"line_end":559,"column_start":12,"column_end":20},"name":"num_args","qualname":"<Cursor>::num_args","value":"fn (&self) -> Result<u32, ()>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a function/method call or\n declaration, return the number of arguments it takes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":66403,"byte_end":66419,"line_start":567,"line_end":567,"column_start":12,"column_end":28},"name":"access_specifier","qualname":"<Cursor>::access_specifier","value":"fn (&self) -> CX_CXXAccessSpecifier","parent":null,"children":[],"decl_id":null,"docs":" Get the access specifier for this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":66618,"byte_end":66634,"line_start":573,"line_end":573,"column_start":12,"column_end":28},"name":"is_mutable_field","qualname":"<Cursor>::is_mutable_field","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a field declaration that is marked as\n `mutable`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":66839,"byte_end":66854,"line_start":579,"line_end":579,"column_start":12,"column_end":27},"name":"offset_of_field","qualname":"<Cursor>::offset_of_field","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of the field represented by the Cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":67311,"byte_end":67327,"line_start":594,"line_end":594,"column_start":12,"column_end":28},"name":"method_is_static","qualname":"<Cursor>::method_is_static","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is declared `static`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":67498,"byte_end":67513,"line_start":599,"line_end":599,"column_start":12,"column_end":27},"name":"method_is_const","qualname":"<Cursor>::method_is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is declared `const`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":67683,"byte_end":67700,"line_start":604,"line_end":604,"column_start":12,"column_end":29},"name":"method_is_virtual","qualname":"<Cursor>::method_is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is declared `const`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":67868,"byte_end":67883,"line_start":609,"line_end":609,"column_start":12,"column_end":27},"name":"is_virtual_base","qualname":"<Cursor>::is_virtual_base","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a struct or class with virtual members?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":68008,"byte_end":68016,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Cursor>::evaluate","value":"fn (&self) -> Option<EvalResult>","parent":null,"children":[],"decl_id":null,"docs":" Try to evaluate this cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":68144,"byte_end":68152,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"ret_type","qualname":"<Cursor>::ret_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Return the result type for this cursor\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3012},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69516,"byte_end":69520,"line_start":668,"line_end":668,"column_start":12,"column_end":16},"name":"Type","qualname":"::clang::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":887}],"decl_id":null,"docs":" The type of a node in clang's AST.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69505,"byte_end":69539,"line_start":668,"line_end":670,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":889},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70260,"byte_end":70267,"line_start":696,"line_end":696,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::clang::LayoutError::Invalid","value":"LayoutError::Invalid","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" Asked for the layout of an invalid type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70325,"byte_end":70335,"line_start":698,"line_end":698,"column_start":5,"column_end":15},"name":"Incomplete","qualname":"::clang::LayoutError::Incomplete","value":"LayoutError::Incomplete","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" Asked for the layout of an incomplete type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70391,"byte_end":70400,"line_start":700,"line_end":700,"column_start":5,"column_end":14},"name":"Dependent","qualname":"::clang::LayoutError::Dependent","value":"LayoutError::Dependent","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" Asked for the layout of a dependent type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70479,"byte_end":70494,"line_start":702,"line_end":702,"column_start":5,"column_end":20},"name":"NotConstantSize","qualname":"::clang::LayoutError::NotConstantSize","value":"LayoutError::NotConstantSize","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" Asked for the layout of a type that does not have constant size.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":897},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70591,"byte_end":70607,"line_start":705,"line_end":705,"column_start":5,"column_end":21},"name":"InvalidFieldName","qualname":"::clang::LayoutError::InvalidFieldName","value":"LayoutError::InvalidFieldName","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" Asked for the layout of a field in a type that does not have such a\n field.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":899},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70646,"byte_end":70653,"line_start":707,"line_end":707,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::clang::LayoutError::Unknown","value":"LayoutError::Unknown","parent":{"krate":0,"index":3020},"children":[],"decl_id":null,"docs":" An unknown layout error.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3020},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70193,"byte_end":70204,"line_start":694,"line_end":694,"column_start":10,"column_end":21},"name":"LayoutError","qualname":"::clang::LayoutError","value":"LayoutError::{Invalid, Incomplete, Dependent, NotConstantSize, InvalidFieldName, Unknown}","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":899}],"decl_id":null,"docs":" An error about the layout of a struct, class, or type.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70184,"byte_end":70656,"line_start":694,"line_end":708,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70184,"byte_end":70656,"line_start":694,"line_end":708,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71186,"byte_end":71190,"line_start":727,"line_end":727,"column_start":12,"column_end":16},"name":"kind","qualname":"<Type>::kind","value":"fn (&self) -> CXTypeKind","parent":null,"children":[],"decl_id":null,"docs":" Get this type's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71310,"byte_end":71321,"line_start":732,"line_end":732,"column_start":12,"column_end":23},"name":"declaration","qualname":"<Type>::declaration","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to this type's declaration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71546,"byte_end":71567,"line_start":741,"line_end":741,"column_start":12,"column_end":33},"name":"canonical_declaration","qualname":"<Type>::canonical_declaration","value":"fn (&self, location: Option<&Cursor>) -> Option<CanonicalTypeDeclaration>","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical declaration of this type, if it is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":72445,"byte_end":72453,"line_start":766,"line_end":766,"column_start":12,"column_end":20},"name":"spelling","qualname":"<Type>::spelling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get a raw display name for this type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":72925,"byte_end":72933,"line_start":780,"line_end":780,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Type>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type const qualified?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73127,"byte_end":73131,"line_start":786,"line_end":786,"column_start":12,"column_end":16},"name":"size","qualname":"<Type>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" What is the size of this type? Paper over invalid types by returning `0`\n for them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73337,"byte_end":73350,"line_start":794,"line_end":794,"column_start":12,"column_end":25},"name":"fallible_size","qualname":"<Type>::fallible_size","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" What is the size of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73686,"byte_end":73691,"line_start":805,"line_end":805,"column_start":12,"column_end":17},"name":"align","qualname":"<Type>::align","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" What is the alignment of this type? Paper over invalid types by\n returning `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73903,"byte_end":73917,"line_start":813,"line_end":813,"column_start":12,"column_end":26},"name":"fallible_align","qualname":"<Type>::fallible_align","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" What is the alignment of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":74305,"byte_end":74320,"line_start":826,"line_end":826,"column_start":12,"column_end":27},"name":"fallible_layout","qualname":"<Type>::fallible_layout","value":"fn (&self) -> Result<::ir::layout::Layout, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" Get the layout for this type, or an error describing why it does not\n have a valid layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":74672,"byte_end":74689,"line_start":835,"line_end":835,"column_start":12,"column_end":29},"name":"num_template_args","qualname":"<Type>::num_template_args","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Get the number of template arguments this type has, or `None` if it is\n not some kind of template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":75051,"byte_end":75064,"line_start":847,"line_end":847,"column_start":12,"column_end":25},"name":"template_args","qualname":"<Type>::template_args","value":"fn (&self) -> Option<TypeTemplateArgIterator>","parent":null,"children":[],"decl_id":null,"docs":" If this type is a class template specialization, return its\n template arguments. Otherwise, return None.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":75404,"byte_end":75416,"line_start":859,"line_end":859,"column_start":12,"column_end":24},"name":"pointee_type","qualname":"<Type>::pointee_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a pointer type, return the type that it points\n to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76012,"byte_end":76021,"line_start":878,"line_end":878,"column_start":12,"column_end":21},"name":"elem_type","qualname":"<Type>::elem_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is an array, vector, or complex type, return the\n type of its elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76374,"byte_end":76386,"line_start":891,"line_end":891,"column_start":12,"column_end":24},"name":"num_elements","qualname":"<Type>::num_elements","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is an array or vector type, return its number of\n elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76777,"byte_end":76791,"line_start":902,"line_end":902,"column_start":12,"column_end":26},"name":"canonical_type","qualname":"<Type>::canonical_type","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical version of this type. This sees through `typdef`s and\n aliases to get the underlying, canonical type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76985,"byte_end":76996,"line_start":911,"line_end":911,"column_start":12,"column_end":23},"name":"is_variadic","qualname":"<Type>::is_variadic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type a variadic function type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77184,"byte_end":77192,"line_start":917,"line_end":917,"column_start":12,"column_end":20},"name":"ret_type","qualname":"<Type>::ret_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a function type, get the type of its return\n value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77532,"byte_end":77541,"line_start":926,"line_end":926,"column_start":12,"column_end":21},"name":"call_conv","qualname":"<Type>::call_conv","value":"fn (&self) -> CXCallingConv","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a function type, get its calling convention. If\n this is not a function type, `CXCallingConv_Invalid` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77799,"byte_end":77804,"line_start":932,"line_end":932,"column_start":12,"column_end":17},"name":"named","qualname":"<Type>::named","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" For elaborated types (types which use `class`, `struct`, or `union` to\n disambiguate types from local bindings), get the underlying type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78114,"byte_end":78122,"line_start":945,"line_end":945,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<Type>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a valid type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78238,"byte_end":78258,"line_start":950,"line_end":950,"column_start":12,"column_end":32},"name":"is_valid_and_exposed","qualname":"<Type>::is_valid_and_exposed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a valid and exposed type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78405,"byte_end":78435,"line_start":955,"line_end":955,"column_start":12,"column_end":42},"name":"is_fully_instantiated_template","qualname":"<Type>::is_fully_instantiated_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type a fully instantiated template?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":79193,"byte_end":79211,"line_start":977,"line_end":977,"column_start":12,"column_end":30},"name":"is_associated_type","qualname":"<Type>::is_associated_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type an associated template type? Eg `T::Associated` in\n this example:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3064},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80154,"byte_end":80178,"line_start":999,"line_end":999,"column_start":12,"column_end":36},"name":"CanonicalTypeDeclaration","qualname":"::clang::CanonicalTypeDeclaration","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `CanonicalTypeDeclaration` type exists as proof-by-construction that its\n cursor is the canonical declaration for its type. If you have a\n `CanonicalTypeDeclaration` instance, you know for sure that the type and\n cursor match up in a canonical declaration relationship, and it simply\n cannot be otherwise.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80143,"byte_end":80193,"line_start":999,"line_end":999,"column_start":1,"column_end":51}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80143,"byte_end":80193,"line_start":999,"line_end":999,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80260,"byte_end":80262,"line_start":1003,"line_end":1003,"column_start":12,"column_end":14},"name":"ty","qualname":"<CanonicalTypeDeclaration>::ty","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get the type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80368,"byte_end":80374,"line_start":1008,"line_end":1008,"column_start":12,"column_end":18},"name":"cursor","qualname":"<CanonicalTypeDeclaration>::cursor","value":"fn (&self) -> &Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the type's canonical declaration cursor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80480,"byte_end":80503,"line_start":1014,"line_end":1014,"column_start":12,"column_end":35},"name":"TypeTemplateArgIterator","qualname":"::clang::TypeTemplateArgIterator","value":"TypeTemplateArgIterator {  }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" An iterator for a type's template arguments.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81237,"byte_end":81251,"line_start":1044,"line_end":1044,"column_start":12,"column_end":26},"name":"SourceLocation","qualname":"::clang::SourceLocation","value":"SourceLocation {  }","parent":null,"children":[{"krate":0,"index":55}],"decl_id":null,"docs":" A `SourceLocation` is a file, line, column, and byte offset location for\n some source text.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81405,"byte_end":81413,"line_start":1051,"line_end":1051,"column_start":12,"column_end":20},"name":"location","qualname":"<SourceLocation>::location","value":"fn (&self) -> (File, usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the (file, line, column, byte offset) tuple for this source\n location.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82443,"byte_end":82450,"line_start":1086,"line_end":1086,"column_start":12,"column_end":19},"name":"Comment","qualname":"::clang::Comment","value":"Comment {  }","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" A comment in the source text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82538,"byte_end":82542,"line_start":1092,"line_end":1092,"column_start":12,"column_end":16},"name":"kind","qualname":"<Comment>::kind","value":"fn (&self) -> CXCommentKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of comment is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82680,"byte_end":82692,"line_start":1097,"line_end":1097,"column_start":12,"column_end":24},"name":"get_children","qualname":"<Comment>::get_children","value":"fn (&self) -> CommentChildrenIterator","parent":null,"children":[],"decl_id":null,"docs":" Get this comment's children comment\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83004,"byte_end":83016,"line_start":1107,"line_end":1107,"column_start":12,"column_end":24},"name":"get_tag_name","qualname":"<Comment>::get_tag_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Given that this comment is the start or end of an HTML tag, get its tag\n name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83209,"byte_end":83222,"line_start":1112,"line_end":1112,"column_start":12,"column_end":25},"name":"get_tag_attrs","qualname":"<Comment>::get_tag_attrs","value":"fn (&self) -> CommentAttributesIterator","parent":null,"children":[],"decl_id":null,"docs":" Given that this comment is an HTML start tag, get its attributes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83484,"byte_end":83507,"line_start":1122,"line_end":1122,"column_start":12,"column_end":35},"name":"CommentChildrenIterator","qualname":"::clang::CommentChildrenIterator","value":"CommentChildrenIterator {  }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63}],"decl_id":null,"docs":" An iterator for a comment's children\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84007,"byte_end":84023,"line_start":1144,"line_end":1144,"column_start":12,"column_end":28},"name":"CommentAttribute","qualname":"::clang::CommentAttribute","value":"CommentAttribute { name, value }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":67}],"decl_id":null,"docs":" An HTML start tag comment attribute\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":65},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84072,"byte_end":84076,"line_start":1146,"line_end":1146,"column_start":9,"column_end":13},"name":"name","qualname":"::clang::CommentAttribute::name","value":"std::string::String","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" HTML start tag attribute name\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":67},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84133,"byte_end":84138,"line_start":1148,"line_end":1148,"column_start":9,"column_end":14},"name":"value","qualname":"::clang::CommentAttribute::value","value":"std::string::String","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" HTML start tag attribute value\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84205,"byte_end":84230,"line_start":1152,"line_end":1152,"column_start":12,"column_end":37},"name":"CommentAttributesIterator","qualname":"::clang::CommentAttributesIterator","value":"CommentAttributesIterator {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73}],"decl_id":null,"docs":" An iterator for a comment's attributes\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84985,"byte_end":84989,"line_start":1181,"line_end":1181,"column_start":12,"column_end":16},"name":"File","qualname":"::clang::File","value":"File {  }","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" A source file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85075,"byte_end":85079,"line_start":1187,"line_end":1187,"column_start":12,"column_end":16},"name":"name","qualname":"<File>::name","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this source file.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85774,"byte_end":85779,"line_start":1211,"line_end":1211,"column_start":12,"column_end":17},"name":"Index","qualname":"::clang::Index","value":"Index {  }","parent":null,"children":[{"krate":0,"index":77}],"decl_id":null,"docs":" An `Index` is an environment for a set of translation units that will\n typically end up linked together in one final binary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86106,"byte_end":86109,"line_start":1222,"line_end":1222,"column_start":12,"column_end":15},"name":"new","qualname":"<Index>::new","value":"fn (pch: bool, diag: bool) -> Index","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Index`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3086},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86603,"byte_end":86608,"line_start":1247,"line_end":1247,"column_start":12,"column_end":17},"name":"Token","qualname":"::clang::Token","value":"Token { kind, spelling }","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":913}],"decl_id":null,"docs":" A token emitted by clang's lexer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":911},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86654,"byte_end":86658,"line_start":1249,"line_end":1249,"column_start":9,"column_end":13},"name":"kind","qualname":"::clang::Token::kind","value":"i32","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":" The kind of token this is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":913},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86720,"byte_end":86728,"line_start":1251,"line_end":1251,"column_start":9,"column_end":17},"name":"spelling","qualname":"::clang::Token::spelling","value":"std::string::String","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":" A display name for this token.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86800,"byte_end":86815,"line_start":1255,"line_end":1255,"column_start":12,"column_end":27},"name":"TranslationUnit","qualname":"::clang::TranslationUnit","value":"TranslationUnit {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" A translation unit (or \"compilation unit\").\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87087,"byte_end":87092,"line_start":1267,"line_end":1267,"column_start":12,"column_end":17},"name":"parse","qualname":"<TranslationUnit>::parse","value":"fn (ix: &Index, file: &str, cmd_args: &[String], unsaved: &[UnsavedFile], opts: CXTranslationUnit_Flags) -> Option<TranslationUnit>","parent":null,"children":[],"decl_id":null,"docs":" Parse a source file into a translation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88354,"byte_end":88359,"line_start":1300,"line_end":1300,"column_start":12,"column_end":17},"name":"diags","qualname":"<TranslationUnit>::diags","value":"fn (&self) -> Vec<Diagnostic>","parent":null,"children":[],"decl_id":null,"docs":" Get the Clang diagnostic information associated with this translation\n unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88794,"byte_end":88800,"line_start":1314,"line_end":1314,"column_start":12,"column_end":18},"name":"cursor","qualname":"<TranslationUnit>::cursor","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to the root of this translation unit's AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":89002,"byte_end":89009,"line_start":1323,"line_end":1323,"column_start":12,"column_end":19},"name":"is_null","qualname":"<TranslationUnit>::is_null","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the null translation unit?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":89176,"byte_end":89182,"line_start":1329,"line_end":1329,"column_start":12,"column_end":18},"name":"tokens","qualname":"<TranslationUnit>::tokens","value":"fn (&self, cursor: &Cursor) -> Option<Vec<Token>>","parent":null,"children":[],"decl_id":null,"docs":" Invoke Clang's lexer on this translation unit and get the stream of\n tokens that come out.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":90270,"byte_end":90282,"line_start":1359,"line_end":1359,"column_start":12,"column_end":24},"name":"cexpr_tokens","qualname":"<TranslationUnit>::cexpr_tokens","value":"fn (&self, cursor: &Cursor) -> Option<Vec<cexpr::token::Token>>","parent":null,"children":[],"decl_id":null,"docs":" Convert a set of tokens from clang into `cexpr` tokens, for further\n processing.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91750,"byte_end":91760,"line_start":1402,"line_end":1402,"column_start":12,"column_end":22},"name":"Diagnostic","qualname":"::clang::Diagnostic","value":"Diagnostic {  }","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" A diagnostic message generated while parsing a translation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91910,"byte_end":91916,"line_start":1409,"line_end":1409,"column_start":12,"column_end":18},"name":"format","qualname":"<Diagnostic>::format","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Format this diagnostic message as a string, using the given option bit\n flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92173,"byte_end":92181,"line_start":1417,"line_end":1417,"column_start":12,"column_end":20},"name":"severity","qualname":"<Diagnostic>::severity","value":"fn (&self) -> CXDiagnosticSeverity","parent":null,"children":[],"decl_id":null,"docs":" What is the severity of this diagnostic message?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92509,"byte_end":92520,"line_start":1432,"line_end":1432,"column_start":12,"column_end":23},"name":"UnsavedFile","qualname":"::clang::UnsavedFile","value":"UnsavedFile { name }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97}],"decl_id":null,"docs":" A file which has not been saved to disk.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":95},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92664,"byte_end":92668,"line_start":1436,"line_end":1436,"column_start":9,"column_end":13},"name":"name","qualname":"::clang::UnsavedFile::name","value":"std::ffi::CString","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The name of the unsaved file. Kept here to avoid leaving dangling pointers in\n `CXUnsavedFile`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92810,"byte_end":92813,"line_start":1442,"line_end":1442,"column_start":12,"column_end":15},"name":"new","qualname":"<UnsavedFile>::new","value":"fn (name: &str, contents: &str) -> UnsavedFile","parent":null,"children":[],"decl_id":null,"docs":" Construct a new unsaved file with the given `name` and `contents`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3094},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100803,"byte_end":100813,"line_start":1681,"line_end":1681,"column_start":12,"column_end":22},"name":"EvalResult","qualname":"::clang::EvalResult","value":"EvalResult {  }","parent":null,"children":[{"krate":0,"index":915}],"decl_id":null,"docs":" A wrapper for the result of evaluating an expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100918,"byte_end":100921,"line_start":1687,"line_end":1687,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalResult>::new","value":"fn (cursor: Cursor) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate `cursor` and return the result.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":102252,"byte_end":102261,"line_start":1722,"line_end":1722,"column_start":12,"column_end":21},"name":"as_double","qualname":"<EvalResult>::as_double","value":"fn (&self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" Try to get back the result as a double.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":102536,"byte_end":102542,"line_start":1732,"line_end":1732,"column_start":12,"column_end":18},"name":"as_int","qualname":"<EvalResult>::as_int","value":"fn (&self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Try to get back the result as an integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":102860,"byte_end":102877,"line_start":1743,"line_end":1743,"column_start":12,"column_end":29},"name":"as_literal_string","qualname":"<EvalResult>::as_literal_string","value":"fn (&self) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the expression as a literal string, that may or may not be\n valid utf-8.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":917},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104187,"byte_end":104191,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"None","qualname":"::ir::annotations::FieldAccessorKind::None","value":"FieldAccessorKind::None","parent":{"krate":0,"index":3100},"children":[],"decl_id":null,"docs":" No accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104221,"byte_end":104228,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"Regular","qualname":"::ir::annotations::FieldAccessorKind::Regular","value":"FieldAccessorKind::Regular","parent":{"krate":0,"index":3100},"children":[],"decl_id":null,"docs":" Plain accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":921},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104259,"byte_end":104265,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Unsafe","qualname":"::ir::annotations::FieldAccessorKind::Unsafe","value":"FieldAccessorKind::Unsafe","parent":{"krate":0,"index":3100},"children":[],"decl_id":null,"docs":" Unsafe accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":923},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104299,"byte_end":104308,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"Immutable","qualname":"::ir::annotations::FieldAccessorKind::Immutable","value":"FieldAccessorKind::Immutable","parent":{"krate":0,"index":3100},"children":[],"decl_id":null,"docs":" Immutable accessor.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3100},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104142,"byte_end":104159,"line_start":11,"line_end":11,"column_start":10,"column_end":27},"name":"FieldAccessorKind","qualname":"::ir::annotations::FieldAccessorKind","value":"FieldAccessorKind::{None, Regular, Unsafe, Immutable}","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":923}],"decl_id":null,"docs":" What kind of accessor should we provide for a field?\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104133,"byte_end":104311,"line_start":11,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3116},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":104565,"byte_end":104576,"line_start":29,"line_end":29,"column_start":12,"column_end":23},"name":"Annotations","qualname":"::ir::annotations::Annotations","value":"Annotations {  }","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937}],"decl_id":null,"docs":" Annotations for a given item, or a field.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106560,"byte_end":106563,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Annotations>::new","value":"fn (cursor: &clang::Cursor) -> Option<Annotations>","parent":null,"children":[],"decl_id":null,"docs":" Construct new annotations for the given cursor and its bindgen comments\n (if any).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106861,"byte_end":106865,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"hide","qualname":"<Annotations>::hide","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should this type be hidden?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106955,"byte_end":106961,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"opaque","qualname":"<Annotations>::opaque","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should this type be opaque?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":107588,"byte_end":107602,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"use_instead_of","qualname":"<Annotations>::use_instead_of","value":"fn (&self) -> Option<&[String]>","parent":null,"children":[],"decl_id":null,"docs":" For a given type, indicates the type it should replace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":107757,"byte_end":107770,"line_start":134,"line_end":134,"column_start":12,"column_end":25},"name":"disallow_copy","qualname":"<Annotations>::disallow_copy","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should we avoid implementing the `Copy` trait?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":107871,"byte_end":107885,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"private_fields","qualname":"<Annotations>::private_fields","value":"fn (&self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Should the fields be private?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":108030,"byte_end":108043,"line_start":144,"line_end":144,"column_start":12,"column_end":25},"name":"accessor_kind","qualname":"<Annotations>::accessor_kind","value":"fn (&self) -> Option<FieldAccessorKind>","parent":null,"children":[],"decl_id":null,"docs":" What kind of accessors should we provide for this type's fields?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":109566,"byte_end":109587,"line_start":185,"line_end":185,"column_start":12,"column_end":33},"name":"constify_enum_variant","qualname":"<Annotations>::constify_enum_variant","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether we've parsed a \"constant\" attribute.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3132},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":128364,"byte_end":128386,"line_start":149,"line_end":149,"column_start":12,"column_end":34},"name":"UsedTemplateParameters","qualname":"::ir::analysis::template_params::UsedTemplateParameters","value":"UsedTemplateParameters {  }","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":949}],"decl_id":null,"docs":" An analysis that finds for each IR item its set of template parameters that\n it uses.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3164},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":146548,"byte_end":146565,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"CannotDeriveDebug","qualname":"::ir::analysis::derive_debug::CannotDeriveDebug","value":"CannotDeriveDebug {  }","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":971}],"decl_id":null,"docs":" An analysis that finds for each IR item whether debug cannot be derived.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3222},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":158257,"byte_end":158274,"line_start":20,"line_end":20,"column_start":12,"column_end":29},"name":"HasVtableAnalysis","qualname":"::ir::analysis::has_vtable::HasVtableAnalysis","value":"HasVtableAnalysis {  }","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":989}],"decl_id":null,"docs":" An analysis that finds for each IR item whether it has vtable or not","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":684},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":112892,"byte_end":112896,"line_start":72,"line_end":72,"column_start":10,"column_end":14},"name":"Node","qualname":"::ir::analysis::MonotoneFramework::Node","value":"type Node: Copy;","parent":{"krate":0,"index":682},"children":[],"decl_id":null,"docs":" The type of node in our dependency graph.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":686},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":113177,"byte_end":113182,"line_start":79,"line_end":79,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::analysis::MonotoneFramework::Extra","value":"type Extra: Sized;","parent":{"krate":0,"index":682},"children":[],"decl_id":null,"docs":" Any extra data that is needed during computation.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":688},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":113379,"byte_end":113385,"line_start":84,"line_end":84,"column_start":10,"column_end":16},"name":"Output","qualname":"::ir::analysis::MonotoneFramework::Output","value":"type Output: From<Self> + fmt::Debug;","parent":{"krate":0,"index":682},"children":[],"decl_id":null,"docs":" The final output of this analysis. Once we have reached a fix-point, we\n convert `self` into this type, and return it as the final result of the\n analysis.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163690,"byte_end":163696,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Struct","qualname":"::ir::comp::CompKind::Struct","value":"CompKind::Struct","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" A struct.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1001},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163719,"byte_end":163724,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"name":"Union","qualname":"::ir::comp::CompKind::Union","value":"CompKind::Union","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" A union.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3234},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163657,"byte_end":163665,"line_start":23,"line_end":23,"column_start":10,"column_end":18},"name":"CompKind","qualname":"::ir::comp::CompKind","value":"CompKind::{Struct, Union}","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1001}],"decl_id":null,"docs":" The kind of compound type.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163648,"byte_end":163727,"line_start":23,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1003},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163925,"byte_end":163936,"line_start":35,"line_end":35,"column_start":5,"column_end":16},"name":"Constructor","qualname":"::ir::comp::MethodKind::Constructor","value":"MethodKind::Constructor","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A constructor. We represent it as method for convenience, to avoid code\n duplication.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163964,"byte_end":163974,"line_start":37,"line_end":37,"column_start":5,"column_end":15},"name":"Destructor","qualname":"::ir::comp::MethodKind::Destructor","value":"MethodKind::Destructor","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A destructor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164010,"byte_end":164027,"line_start":39,"line_end":39,"column_start":5,"column_end":22},"name":"VirtualDestructor","qualname":"::ir::comp::MethodKind::VirtualDestructor","value":"MethodKind::VirtualDestructor","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A virtual destructor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1009},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164058,"byte_end":164064,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Static","qualname":"::ir::comp::MethodKind::Static","value":"MethodKind::Static","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A static method.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164095,"byte_end":164101,"line_start":43,"line_end":43,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::comp::MethodKind::Normal","value":"MethodKind::Normal","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A normal method.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1013},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164133,"byte_end":164140,"line_start":45,"line_end":45,"column_start":5,"column_end":12},"name":"Virtual","qualname":"::ir::comp::MethodKind::Virtual","value":"MethodKind::Virtual","parent":{"krate":0,"index":3250},"children":[],"decl_id":null,"docs":" A virtual method.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3250},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163807,"byte_end":163817,"line_start":32,"line_end":32,"column_start":10,"column_end":20},"name":"MethodKind","qualname":"::ir::comp::MethodKind","value":"MethodKind::{Constructor, Destructor, VirtualDestructor, Static, Normal, Virtual}","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1013}],"decl_id":null,"docs":" The kind of C++ method.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":163798,"byte_end":164143,"line_start":32,"line_end":46,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3266},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164248,"byte_end":164254,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"Method","qualname":"::ir::comp::Method","value":"Method {  }","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1019}],"decl_id":null,"docs":" A struct representing a C++ method, either static, normal, or virtual.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164570,"byte_end":164573,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<Method>::new","value":"fn (kind: MethodKind, signature: ItemId, is_const: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Method`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164809,"byte_end":164813,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"kind","qualname":"<Method>::kind","value":"fn (&self) -> MethodKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of method is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164910,"byte_end":164923,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"is_destructor","qualname":"<Method>::is_destructor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a destructor method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":165088,"byte_end":165102,"line_start":82,"line_end":82,"column_start":12,"column_end":26},"name":"is_constructor","qualname":"<Method>::is_constructor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a constructor?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":165217,"byte_end":165227,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"is_virtual","qualname":"<Method>::is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a virtual method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":165391,"byte_end":165400,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"is_static","qualname":"<Method>::is_static","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a static method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":165547,"byte_end":165556,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"signature","qualname":"<Method>::signature","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get the `ItemId` for the `Function` signature for this method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":165659,"byte_end":165667,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Method>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a const qualified method?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3272},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":166641,"byte_end":166653,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"BitfieldUnit","qualname":"::ir::comp::BitfieldUnit","value":"BitfieldUnit {  }","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1023},{"krate":0,"index":1025}],"decl_id":null,"docs":" A contiguous set of logical bitfields that live within the same physical\n allocation unit. See 9.2.4 [class.bit] in the C++ standard and [section\n 2.4.II.1 in the Itanium C++\n ABI](http://itanium-cxx-abi.github.io/cxx-abi/abi.html#class-types).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":166931,"byte_end":166934,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"nth","qualname":"<BitfieldUnit>::nth","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the 1-based index of this bitfield unit within its containing\n struct. Useful for generating a Rust struct's field name for this unit\n of bitfields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167048,"byte_end":167054,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"layout","qualname":"<BitfieldUnit>::layout","value":"fn (&self) -> Layout","parent":null,"children":[],"decl_id":null,"docs":" Get the layout within which these bitfields reside.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167156,"byte_end":167165,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"bitfields","qualname":"<BitfieldUnit>::bitfields","value":"fn (&self) -> &[Bitfield]","parent":null,"children":[],"decl_id":null,"docs":" Get the bitfields within this unit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1027},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167330,"byte_end":167340,"line_start":166,"line_end":166,"column_start":5,"column_end":15},"name":"DataMember","qualname":"::ir::comp::Field::DataMember","value":"Field::DataMember(FieldData)","parent":{"krate":0,"index":3278},"children":[],"decl_id":null,"docs":" A normal data member.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1031},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167428,"byte_end":167437,"line_start":169,"line_end":169,"column_start":5,"column_end":14},"name":"Bitfields","qualname":"::ir::comp::Field::Bitfields","value":"Field::Bitfields(BitfieldUnit)","parent":{"krate":0,"index":3278},"children":[],"decl_id":null,"docs":" A physical allocation unit containing many logical bitfields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3278},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167288,"byte_end":167293,"line_start":164,"line_end":164,"column_start":10,"column_end":15},"name":"Field","qualname":"::ir::comp::Field","value":"Field::{DataMember, Bitfields}","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1031}],"decl_id":null,"docs":" A struct representing a C++ field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167832,"byte_end":167838,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"layout","qualname":"<Field>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" Get this field's layout.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3284},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":170523,"byte_end":170531,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"Bitfield","qualname":"::ir::comp::Bitfield","value":"Bitfield {  }","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1037}],"decl_id":null,"docs":" A logical bitfield within some physical bitfield allocation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171162,"byte_end":171178,"line_start":291,"line_end":291,"column_start":12,"column_end":28},"name":"offset_into_unit","qualname":"<Bitfield>::offset_into_unit","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index of the bit within this bitfield's allocation unit where\n this bitfield begins.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171364,"byte_end":171368,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"mask","qualname":"<Bitfield>::mask","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the mask value that when &'ed with this bitfield's allocation unit\n produces this bitfield's value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171756,"byte_end":171761,"line_start":312,"line_end":312,"column_start":12,"column_end":17},"name":"width","qualname":"<Bitfield>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the bit width of this bitfield.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171873,"byte_end":171877,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"name","qualname":"<Bitfield>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this bitfield.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":182991,"byte_end":183000,"line_start":652,"line_end":652,"column_start":12,"column_end":21},"name":"FieldData","qualname":"::ir::comp::FieldData","value":"FieldData {  }","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1063}],"decl_id":null,"docs":" Common data shared across different field types.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1065},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185502,"byte_end":185508,"line_start":749,"line_end":749,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::comp::BaseKind::Normal","value":"BaseKind::Normal","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":" Normal inheritance, like:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1067},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185622,"byte_end":185629,"line_start":755,"line_end":755,"column_start":5,"column_end":12},"name":"Virtual","qualname":"::ir::comp::BaseKind::Virtual","value":"BaseKind::Virtual","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":" Virtual inheritance, like:","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3312},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185387,"byte_end":185395,"line_start":743,"line_end":743,"column_start":10,"column_end":18},"name":"BaseKind","qualname":"::ir::comp::BaseKind","value":"BaseKind::{Normal, Virtual}","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1067}],"decl_id":null,"docs":" The kind of inheritance a base class is using.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185378,"byte_end":185632,"line_start":743,"line_end":756,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3330},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185687,"byte_end":185691,"line_start":760,"line_end":760,"column_start":12,"column_end":16},"name":"Base","qualname":"::ir::comp::Base","value":"Base { ty, kind }","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1071}],"decl_id":null,"docs":" A base class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1069},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185739,"byte_end":185741,"line_start":762,"line_end":762,"column_start":9,"column_end":11},"name":"ty","qualname":"::ir::comp::Base::ty","value":"ir::context::ItemId","parent":{"krate":0,"index":3330},"children":[],"decl_id":null,"docs":" The type of this base class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1071},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185804,"byte_end":185808,"line_start":764,"line_end":764,"column_start":9,"column_end":13},"name":"kind","qualname":"::ir::comp::Base::kind","value":"ir::comp::BaseKind","parent":{"krate":0,"index":3330},"children":[],"decl_id":null,"docs":" The kind of inheritance we're doing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185903,"byte_end":185913,"line_start":769,"line_end":769,"column_start":12,"column_end":22},"name":"is_virtual","qualname":"<Base>::is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this base class is inheriting virtually.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3340},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":186199,"byte_end":186207,"line_start":780,"line_end":780,"column_start":12,"column_end":20},"name":"CompInfo","qualname":"::ir::comp::CompInfo","value":"CompInfo {  }","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1085},{"krate":0,"index":1087},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1105},{"krate":0,"index":1107}],"decl_id":null,"docs":" A compound type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":188993,"byte_end":188996,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"new","qualname":"<CompInfo>::new","value":"fn (kind: CompKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new compound type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":189797,"byte_end":189807,"line_start":887,"line_end":887,"column_start":12,"column_end":22},"name":"is_unsized","qualname":"<CompInfo>::is_unsized","value":"fn (&self, ctx: &BindgenContext, itemid: &ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this compound type unsized?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":190152,"byte_end":190166,"line_start":895,"line_end":895,"column_start":12,"column_end":26},"name":"has_destructor","qualname":"<CompInfo>::has_destructor","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this compound type have a destructor?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":191425,"byte_end":191431,"line_start":930,"line_end":930,"column_start":12,"column_end":18},"name":"layout","qualname":"<CompInfo>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" Compute the layout of this type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":192087,"byte_end":192093,"line_start":953,"line_end":953,"column_start":12,"column_end":18},"name":"fields","qualname":"<CompInfo>::fields","value":"fn (&self) -> &[Field]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of fields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":192487,"byte_end":192515,"line_start":964,"line_end":964,"column_start":12,"column_end":40},"name":"has_non_type_template_params","qualname":"<CompInfo>::has_non_type_template_params","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this type have any template parameters that aren't types\n (e.g. int)?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":192694,"byte_end":192716,"line_start":970,"line_end":970,"column_start":12,"column_end":34},"name":"has_own_virtual_method","qualname":"<CompInfo>::has_own_virtual_method","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we see a virtual function during parsing?\n Get the has_own_virtual_method boolean.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":192836,"byte_end":192843,"line_start":975,"line_end":975,"column_start":12,"column_end":19},"name":"methods","qualname":"<CompInfo>::methods","value":"fn (&self) -> &[Method]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":192951,"byte_end":192963,"line_start":980,"line_end":980,"column_start":12,"column_end":24},"name":"constructors","qualname":"<CompInfo>::constructors","value":"fn (&self) -> &[ItemId]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of constructors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":193067,"byte_end":193077,"line_start":985,"line_end":985,"column_start":12,"column_end":22},"name":"destructor","qualname":"<CompInfo>::destructor","value":"fn (&self) -> Option<(bool, ItemId)>","parent":null,"children":[],"decl_id":null,"docs":" Get this type's destructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":193199,"byte_end":193203,"line_start":990,"line_end":990,"column_start":12,"column_end":16},"name":"kind","qualname":"<CompInfo>::kind","value":"fn (&self) -> CompKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of compound type is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":193286,"byte_end":193294,"line_start":995,"line_end":995,"column_start":12,"column_end":20},"name":"is_union","qualname":"<CompInfo>::is_union","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a union?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":193423,"byte_end":193435,"line_start":1000,"line_end":1000,"column_start":12,"column_end":24},"name":"base_members","qualname":"<CompInfo>::base_members","value":"fn (&self) -> &[Base]","parent":null,"children":[],"decl_id":null,"docs":" The set of types that this one inherits from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":193558,"byte_end":193565,"line_start":1005,"line_end":1005,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<CompInfo>::from_ty","value":"fn (potential_id: ItemId, ty: &clang::Type, location: Option<clang::Cursor>, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new compound type from a Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":206935,"byte_end":206946,"line_start":1314,"line_end":1314,"column_start":12,"column_end":23},"name":"inner_types","qualname":"<CompInfo>::inner_types","value":"fn (&self) -> &[ItemId]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of types that were declared within this compound type\n (e.g. nested class definitions).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":207089,"byte_end":207099,"line_start":1319,"line_end":1319,"column_start":12,"column_end":22},"name":"inner_vars","qualname":"<CompInfo>::inner_vars","value":"fn (&self) -> &[ItemId]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of static variables declared within this compound type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":207288,"byte_end":207306,"line_start":1325,"line_end":1325,"column_start":12,"column_end":30},"name":"found_unknown_attr","qualname":"<CompInfo>::found_unknown_attr","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we found a field with an opaque type that could potentially mess up\n the layout of this compound type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":207412,"byte_end":207418,"line_start":1330,"line_end":1330,"column_start":12,"column_end":18},"name":"packed","qualname":"<CompInfo>::packed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this compound type packed?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":207623,"byte_end":207644,"line_start":1336,"line_end":1336,"column_start":12,"column_end":33},"name":"needs_explicit_vtable","qualname":"<CompInfo>::needs_explicit_vtable","value":"fn (&self, ctx: &BindgenContext, item: &Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this type needs an explicit vtable because it has\n virtual methods and none of its base classes has already a vtable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":208394,"byte_end":208416,"line_start":1353,"line_end":1353,"column_start":12,"column_end":34},"name":"is_forward_declaration","qualname":"<CompInfo>::is_forward_declaration","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if compound type has been forward declared\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":208557,"byte_end":208579,"line_start":1358,"line_end":1358,"column_start":12,"column_end":34},"name":"compute_bitfield_units","qualname":"<CompInfo>::compute_bitfield_units","value":"fn (&mut self, ctx: &BindgenContext) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute this compound structure's bitfield allocation units.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3370},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":219985,"byte_end":219991,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"ItemId","qualname":"::ir::context::ItemId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single identifier for an item.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":219974,"byte_end":219999,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":219974,"byte_end":219999,"line_start":33,"line_end":33,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220075,"byte_end":220083,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"as_usize","qualname":"<ItemId>::as_usize","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get a numeric representation of this id.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3432},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":221656,"byte_end":221670,"line_start":92,"line_end":92,"column_start":12,"column_end":26},"name":"BindgenContext","qualname":"::ir::context::BindgenContext","value":"BindgenContext {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1133},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1147},{"krate":0,"index":1149},{"krate":0,"index":1151},{"krate":0,"index":1153},{"krate":0,"index":1155},{"krate":0,"index":1157},{"krate":0,"index":1159},{"krate":0,"index":1161},{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1167},{"krate":0,"index":1169},{"krate":0,"index":1171},{"krate":0,"index":1173},{"krate":0,"index":1175},{"krate":0,"index":1177}],"decl_id":null,"docs":" A context used during parsing and generation of structs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":226873,"byte_end":226876,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<BindgenContext<'ctx>>::new","value":"fn (options: BindgenOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the context for the given `options`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":230112,"byte_end":230134,"line_start":327,"line_end":327,"column_start":12,"column_end":34},"name":"currently_parsed_types","qualname":"<BindgenContext<'ctx>>::currently_parsed_types","value":"fn (&self) -> &[PartialType]","parent":null,"children":[],"decl_id":null,"docs":" Get the stack of partially parsed types that we are in the middle of\n parsing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":230420,"byte_end":230433,"line_start":334,"line_end":334,"column_start":12,"column_end":25},"name":"begin_parsing","qualname":"<BindgenContext<'ctx>>::begin_parsing","value":"fn (&mut self, partial_ty: PartialType) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin parsing the given partial type, and push it onto the\n `currently_parsed_types` stack so that we won't infinite recurse if we\n run into a reference to it while parsing it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":230663,"byte_end":230677,"line_start":340,"line_end":340,"column_start":12,"column_end":26},"name":"finish_parsing","qualname":"<BindgenContext<'ctx>>::finish_parsing","value":"fn (&mut self) -> PartialType","parent":null,"children":[],"decl_id":null,"docs":" Finish parsing the current partial type, pop it off the\n `currently_parsed_types` stack, and return it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":230914,"byte_end":230929,"line_start":346,"line_end":346,"column_start":12,"column_end":27},"name":"parse_callbacks","qualname":"<BindgenContext<'ctx>>::parse_callbacks","value":"fn (&self) -> Option<&ParseCallbacks>","parent":null,"children":[],"decl_id":null,"docs":" Get the user-provided callbacks by reference, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":231184,"byte_end":231192,"line_start":354,"line_end":354,"column_start":12,"column_end":20},"name":"add_item","qualname":"<BindgenContext<'ctx>>::add_item","value":"fn (&mut self, item: Item, declaration: Option<Cursor>, location: Option<Cursor>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Define a new item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":235418,"byte_end":235432,"line_start":459,"line_end":459,"column_start":12,"column_end":26},"name":"add_named_type","qualname":"<BindgenContext<'ctx>>::add_named_type","value":"fn (&mut self, item: Item, definition: clang::Cursor) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new named template type parameter to this context's item set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":236402,"byte_end":236416,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"get_named_type","qualname":"<BindgenContext<'ctx>>::get_named_type","value":"fn (&self, definition: &clang::Cursor) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Get the named type defined at the given cursor location, if we've\n already added one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":236780,"byte_end":236786,"line_start":492,"line_end":492,"column_start":12,"column_end":18},"name":"ext_cx","qualname":"<BindgenContext<'ctx>>::ext_cx","value":"fn (&self) -> &ExtCtxt<'ctx>","parent":null,"children":[],"decl_id":null,"docs":" Given that we are in the codegen phase, get the syntex context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":236960,"byte_end":236964,"line_start":497,"line_end":497,"column_start":12,"column_end":16},"name":"span","qualname":"<BindgenContext<'ctx>>::span","value":"fn (&self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Given that we are in the codegen phase, get the current syntex span.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":237082,"byte_end":237093,"line_start":502,"line_end":502,"column_start":12,"column_end":23},"name":"rust_mangle","qualname":"<BindgenContext<'ctx>>::rust_mangle","value":"fn <'a> (&self, name: &'a str) -> Cow<'a, str>","parent":null,"children":[],"decl_id":null,"docs":" Mangles a name so it doesn't conflict with any keyword.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":237726,"byte_end":237736,"line_start":520,"line_end":520,"column_start":12,"column_end":22},"name":"rust_ident","qualname":"<BindgenContext<'ctx>>::rust_ident","value":"fn (&self, name: &str) -> Ident","parent":null,"children":[],"decl_id":null,"docs":" Returns a mangled name as a rust identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":237891,"byte_end":237905,"line_start":525,"line_end":525,"column_start":12,"column_end":26},"name":"rust_ident_raw","qualname":"<BindgenContext<'ctx>>::rust_ident_raw","value":"fn (&self, name: &str) -> Ident","parent":null,"children":[],"decl_id":null,"docs":" Returns a mangled name as a rust identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":238046,"byte_end":238051,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"items","qualname":"<BindgenContext<'ctx>>::items","value":"fn <'a> (&'a self) -> btree_map::Iter<'a, ItemId, Item>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all items that have been defined.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":238211,"byte_end":238229,"line_start":535,"line_end":535,"column_start":12,"column_end":30},"name":"collected_typerefs","qualname":"<BindgenContext<'ctx>>::collected_typerefs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we collected all unresolved type references yet?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":245595,"byte_end":245598,"line_start":737,"line_end":737,"column_start":12,"column_end":15},"name":"gen","qualname":"<BindgenContext<'ctx>>::gen","value":"fn <F, Out> (&mut self, cb: F) -> Out","parent":null,"children":[],"decl_id":null,"docs":" Enter the code generation phase, invoke the given callback `cb`, and\n leave the code generation phase.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":250533,"byte_end":250558,"line_start":863,"line_end":863,"column_start":12,"column_end":37},"name":"lookup_item_id_has_vtable","qualname":"<BindgenContext<'ctx>>::lookup_item_id_has_vtable","value":"fn (&self, id: &ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` has vtable or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":252512,"byte_end":252535,"line_start":904,"line_end":904,"column_start":12,"column_end":35},"name":"uses_template_parameter","qualname":"<BindgenContext<'ctx>>::uses_template_parameter","value":"fn (&self, item: ItemId, template_param: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `item` uses the given `template_param`, `false`\n otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":253548,"byte_end":253576,"line_start":932,"line_end":932,"column_start":12,"column_end":40},"name":"uses_any_template_parameters","qualname":"<BindgenContext<'ctx>>::uses_any_template_parameters","value":"fn (&self, item: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `item` uses any unbound, generic template parameters,\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":254964,"byte_end":254983,"line_start":966,"line_end":966,"column_start":12,"column_end":31},"name":"needs_mangling_hack","qualname":"<BindgenContext<'ctx>>::needs_mangling_hack","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the target triple bindgen is running over.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":255081,"byte_end":255092,"line_start":971,"line_end":971,"column_start":12,"column_end":23},"name":"root_module","qualname":"<BindgenContext<'ctx>>::root_module","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get the root module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":255316,"byte_end":255328,"line_start":979,"line_end":979,"column_start":12,"column_end":24},"name":"resolve_type","qualname":"<BindgenContext<'ctx>>::resolve_type","value":"fn (&self, type_id: ItemId) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` as a type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":255621,"byte_end":255638,"line_start":987,"line_end":987,"column_start":12,"column_end":29},"name":"safe_resolve_type","qualname":"<BindgenContext<'ctx>>::safe_resolve_type","value":"fn (&self, type_id: ItemId) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` as a type, or `None` if there is no item with\n the given id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":255858,"byte_end":255879,"line_start":993,"line_end":993,"column_start":12,"column_end":33},"name":"resolve_item_fallible","qualname":"<BindgenContext<'ctx>>::resolve_item_fallible","value":"fn (&self, item_id: ItemId) -> Option<&Item>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` into an `Item`, or `None` if no such item\n exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":256094,"byte_end":256106,"line_start":1000,"line_end":1000,"column_start":12,"column_end":24},"name":"resolve_item","qualname":"<BindgenContext<'ctx>>::resolve_item","value":"fn (&self, item_id: ItemId) -> &Item","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` into an `Item`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":256333,"byte_end":256347,"line_start":1008,"line_end":1008,"column_start":12,"column_end":26},"name":"current_module","qualname":"<BindgenContext<'ctx>>::current_module","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get the current module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":268320,"byte_end":268337,"line_start":1264,"line_end":1264,"column_start":12,"column_end":29},"name":"get_resolved_type","qualname":"<BindgenContext<'ctx>>::get_resolved_type","value":"fn (&self, decl: &clang::CanonicalTypeDeclaration) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" If we have already resolved the type for the given type declaration,\n return its `ItemId`. Otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":268874,"byte_end":268896,"line_start":1279,"line_end":1279,"column_start":12,"column_end":34},"name":"builtin_or_resolved_ty","qualname":"<BindgenContext<'ctx>>::builtin_or_resolved_ty","value":"fn (&mut self, with_id: ItemId, parent_id: Option<ItemId>, ty: &clang::Type, location: Option<clang::Cursor>) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Looks up for an already resolved type, either because it's builtin, or\n because we already have it in the map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":272067,"byte_end":272083,"line_start":1349,"line_end":1349,"column_start":12,"column_end":28},"name":"build_ty_wrapper","qualname":"<BindgenContext<'ctx>>::build_ty_wrapper","value":"fn (&mut self, with_id: ItemId, wrapped_id: ItemId, parent_id: Option<ItemId>, ty: &clang::Type) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Make a new item that is a resolved type reference to the `wrapped_id`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":272946,"byte_end":272958,"line_start":1370,"line_end":1370,"column_start":12,"column_end":24},"name":"next_item_id","qualname":"<BindgenContext<'ctx>>::next_item_id","value":"fn (&mut self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Returns the next item id to be used for an item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":275958,"byte_end":275974,"line_start":1434,"line_end":1434,"column_start":12,"column_end":28},"name":"translation_unit","qualname":"<BindgenContext<'ctx>>::translation_unit","value":"fn (&self) -> &clang::TranslationUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the current Clang translation unit that is being processed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":276121,"byte_end":276133,"line_start":1439,"line_end":1439,"column_start":12,"column_end":24},"name":"parsed_macro","qualname":"<BindgenContext<'ctx>>::parsed_macro","value":"fn (&self, macro_name: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we parsed the macro named `macro_name` already?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":276281,"byte_end":276294,"line_start":1444,"line_end":1444,"column_start":12,"column_end":25},"name":"parsed_macros","qualname":"<BindgenContext<'ctx>>::parsed_macros","value":"fn (&self) -> &HashMap<Vec<u8>, cexpr::expr::EvalResult>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently parsed macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":276498,"byte_end":276515,"line_start":1450,"line_end":1450,"column_start":12,"column_end":29},"name":"note_parsed_macro","qualname":"<BindgenContext<'ctx>>::note_parsed_macro","value":"fn (&mut self, id: Vec<u8>, value: cexpr::expr::EvalResult) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mark the macro named `macro_name` as parsed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":276733,"byte_end":276749,"line_start":1457,"line_end":1457,"column_start":12,"column_end":28},"name":"in_codegen_phase","qualname":"<BindgenContext<'ctx>>::in_codegen_phase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are we in the codegen phase?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":277056,"byte_end":277063,"line_start":1466,"line_end":1466,"column_start":12,"column_end":19},"name":"replace","qualname":"<BindgenContext<'ctx>>::replace","value":"fn (&mut self, name: &[String], potential_ty: ItemId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mark the type with the given `name` as replaced by the type with id\n `potential_ty`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":277904,"byte_end":277918,"line_start":1486,"line_end":1486,"column_start":12,"column_end":26},"name":"hidden_by_name","qualname":"<BindgenContext<'ctx>>::hidden_by_name","value":"fn (&self, path: &[String], id: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the item with the given `name` hidden? Or is the item with the given\n `name` and `id` replaced by another type, and effectively hidden?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":278292,"byte_end":278308,"line_start":1495,"line_end":1495,"column_start":12,"column_end":28},"name":"is_replaced_type","qualname":"<BindgenContext<'ctx>>::is_replaced_type","value":"fn (&self, path: &[String], id: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the item with the given `name` and `id` been replaced by another\n type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":278572,"byte_end":278586,"line_start":1503,"line_end":1503,"column_start":12,"column_end":26},"name":"opaque_by_name","qualname":"<BindgenContext<'ctx>>::opaque_by_name","value":"fn (&self, path: &[String]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the type with the given `name` marked as opaque?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":278878,"byte_end":278885,"line_start":1510,"line_end":1510,"column_start":12,"column_end":19},"name":"options","qualname":"<BindgenContext<'ctx>>::options","value":"fn (&self) -> &BindgenOptions","parent":null,"children":[],"decl_id":null,"docs":" Get the options used to configure this bindgen context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":281234,"byte_end":281240,"line_start":1572,"line_end":1572,"column_start":12,"column_end":18},"name":"module","qualname":"<BindgenContext<'ctx>>::module","value":"fn (&mut self, cursor: clang::Cursor) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Given a CXCursor_Namespace cursor, return the item id of the\n corresponding module, or create one on the fly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":282192,"byte_end":282203,"line_start":1599,"line_end":1599,"column_start":12,"column_end":23},"name":"with_module","qualname":"<BindgenContext<'ctx>>::with_module","value":"fn <F> (&mut self, module_id: ItemId, cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Start traversing the module with the given `module_id`, invoke the\n callback `cb`, and then return to traversing the original module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":282715,"byte_end":282732,"line_start":1616,"line_end":1616,"column_start":12,"column_end":29},"name":"whitelisted_items","qualname":"<BindgenContext<'ctx>>::whitelisted_items","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all (explicitly or transitively) whitelisted items.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":282980,"byte_end":282993,"line_start":1624,"line_end":1624,"column_start":12,"column_end":25},"name":"codegen_items","qualname":"<BindgenContext<'ctx>>::codegen_items","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the set of items we should generate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":287980,"byte_end":287992,"line_start":1739,"line_end":1739,"column_start":12,"column_end":24},"name":"trait_prefix","qualname":"<BindgenContext<'ctx>>::trait_prefix","value":"fn (&self) -> Ident","parent":null,"children":[],"decl_id":null,"docs":" Convenient method for getting the prefix to use for most traits in\n codegen depending on the `use_core` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":288218,"byte_end":288244,"line_start":1748,"line_end":1748,"column_start":12,"column_end":38},"name":"generated_bindegen_complex","qualname":"<BindgenContext<'ctx>>::generated_bindegen_complex","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Call if a binden complex is generated\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":288382,"byte_end":288408,"line_start":1753,"line_end":1753,"column_start":12,"column_end":38},"name":"need_bindegen_complex_type","qualname":"<BindgenContext<'ctx>>::need_bindegen_complex_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether we need to generate the binden complex type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":288790,"byte_end":288821,"line_start":1765,"line_end":1765,"column_start":12,"column_end":43},"name":"lookup_item_id_can_derive_debug","qualname":"<BindgenContext<'ctx>>::lookup_item_id_can_derive_debug","value":"fn (&self, id: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can\n derive debug or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3486},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289249,"byte_end":289261,"line_start":1777,"line_end":1777,"column_start":12,"column_end":24},"name":"ItemResolver","qualname":"::ir::context::ItemResolver","value":"ItemResolver {  }","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1187},{"krate":0,"index":1189}],"decl_id":null,"docs":" A builder struct for configuring item resolution options.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289238,"byte_end":289342,"line_start":1777,"line_end":1781,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289421,"byte_end":289434,"line_start":1785,"line_end":1785,"column_start":12,"column_end":25},"name":"into_resolver","qualname":"<ItemId>::into_resolver","value":"fn (self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Create an `ItemResolver` from this item id.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289695,"byte_end":289698,"line_start":1798,"line_end":1798,"column_start":12,"column_end":15},"name":"new","qualname":"<ItemResolver>::new","value":"fn (id: ItemId) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `ItemResolver` from the given id.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289933,"byte_end":289950,"line_start":1807,"line_end":1807,"column_start":12,"column_end":29},"name":"through_type_refs","qualname":"<ItemResolver>::through_type_refs","value":"fn (mut self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Keep resolving through `Type::TypeRef` items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":290101,"byte_end":290121,"line_start":1813,"line_end":1813,"column_start":12,"column_end":32},"name":"through_type_aliases","qualname":"<ItemResolver>::through_type_aliases","value":"fn (mut self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Keep resolving through `Type::Alias` items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":290290,"byte_end":290297,"line_start":1819,"line_end":1819,"column_start":12,"column_end":19},"name":"resolve","qualname":"<ItemResolver>::resolve","value":"fn <'a, 'b> (self, ctx: &'a BindgenContext<'b>) -> &'a Item","parent":null,"children":[],"decl_id":null,"docs":" Finish configuring and perform the actual item resolution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3498},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291210,"byte_end":291221,"line_start":1844,"line_end":1844,"column_start":12,"column_end":23},"name":"PartialType","qualname":"::ir::context::PartialType","value":"PartialType {  }","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1193}],"decl_id":null,"docs":" A type that we are in the middle of parsing.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291199,"byte_end":291259,"line_start":1844,"line_end":1847,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291199,"byte_end":291259,"line_start":1844,"line_end":1847,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291330,"byte_end":291333,"line_start":1851,"line_end":1851,"column_start":12,"column_end":15},"name":"new","qualname":"<PartialType>::new","value":"fn (decl: Cursor, id: ItemId) -> PartialType","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `PartialType`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291590,"byte_end":291594,"line_start":1860,"line_end":1860,"column_start":12,"column_end":16},"name":"decl","qualname":"<PartialType>::decl","value":"fn (&self) -> &Cursor","parent":null,"children":[],"decl_id":null,"docs":" The cursor pointing to this partial type's declaration location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291769,"byte_end":291771,"line_start":1866,"line_end":1866,"column_start":12,"column_end":14},"name":"id","qualname":"<PartialType>::id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" The item ID allocated for this type. This is *NOT* a key for an entry in\n the context's item set yet!\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":294202,"byte_end":294207,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::derive::CanTriviallyDeriveDebug::Extra","value":"type Extra;","parent":{"krate":0,"index":1410},"children":[],"decl_id":null,"docs":" Serve the same purpose as the Extra in CanDeriveDebug.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1418},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":294840,"byte_end":294845,"line_start":41,"line_end":41,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::derive::CanDeriveCopy::Extra","value":"type Extra;","parent":{"krate":0,"index":1416},"children":[],"decl_id":null,"docs":" Implementations can define this type to get access to any extra\n information required to determine whether they can derive `Copy`. If\n extra information is unneeded, then this should simply be the unit type.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1426},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":296456,"byte_end":296461,"line_start":89,"line_end":89,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::derive::CanDeriveDefault::Extra","value":"type Extra;","parent":{"krate":0,"index":1424},"children":[],"decl_id":null,"docs":" Implementations can define this type to get access to any extra\n information required to determine whether they can derive `Default`. If\n extra information is unneeded, then this should simply be the unit type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1195},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299431,"byte_end":299445,"line_start":15,"line_end":15,"column_start":5,"column_end":19},"name":"ModuleConstify","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::ModuleConstify","value":"EnumVariantCustomBehavior::ModuleConstify","parent":{"krate":0,"index":3520},"children":[],"decl_id":null,"docs":" This variant will be a module containing constants.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299532,"byte_end":299540,"line_start":17,"line_end":17,"column_start":5,"column_end":13},"name":"Constify","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::Constify","value":"EnumVariantCustomBehavior::Constify","parent":{"krate":0,"index":3520},"children":[],"decl_id":null,"docs":" This variant will be constified, that is, forced to generate a constant.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299616,"byte_end":299620,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Hide","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::Hide","value":"EnumVariantCustomBehavior::Hide","parent":{"krate":0,"index":3520},"children":[],"decl_id":null,"docs":" This variant will be hidden entirely from the resulting enum.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3520},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299339,"byte_end":299364,"line_start":13,"line_end":13,"column_start":10,"column_end":35},"name":"EnumVariantCustomBehavior","qualname":"::ir::enum_ty::EnumVariantCustomBehavior","value":"EnumVariantCustomBehavior::{ModuleConstify, Constify, Hide}","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1197},{"krate":0,"index":1199}],"decl_id":null,"docs":" An enum representing custom handling that can be given to a variant.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299330,"byte_end":299623,"line_start":13,"line_end":20,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299330,"byte_end":299623,"line_start":13,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3540},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":299678,"byte_end":299682,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"Enum","qualname":"::ir::enum_ty::Enum","value":"Enum {  }","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1203}],"decl_id":null,"docs":" A C/C++ enumeration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300153,"byte_end":300156,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<Enum>::new","value":"fn (repr: Option<ItemId>, variants: Vec<EnumVariant>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Enum` with the given representation and variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300363,"byte_end":300367,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"repr","qualname":"<Enum>::repr","value":"fn (&self) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Get this enumeration's representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300472,"byte_end":300480,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"variants","qualname":"<Enum>::variants","value":"fn (&self) -> &[EnumVariant]","parent":null,"children":[],"decl_id":null,"docs":" Get this enumeration's variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300609,"byte_end":300616,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<Enum>::from_ty","value":"fn (ty: &clang::Type, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct an enumeration from the given Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":303602,"byte_end":303627,"line_start":129,"line_end":129,"column_start":12,"column_end":37},"name":"is_constified_enum_module","qualname":"<Enum>::is_constified_enum_module","value":"fn (&self, ctx: &BindgenContext, item: &Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the enum should be an constified enum module\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3548},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304094,"byte_end":304105,"line_start":143,"line_end":143,"column_start":12,"column_end":23},"name":"EnumVariant","qualname":"::ir::enum_ty::EnumVariant","value":"EnumVariant {  }","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1209},{"krate":0,"index":1211}],"decl_id":null,"docs":" A single enum variant, to be contained only in an enum.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1213},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304595,"byte_end":304601,"line_start":161,"line_end":161,"column_start":5,"column_end":11},"name":"Signed","qualname":"::ir::enum_ty::EnumVariantValue::Signed","value":"EnumVariantValue::Signed(i64)","parent":{"krate":0,"index":3554},"children":[],"decl_id":null,"docs":" A signed constant.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1217},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304643,"byte_end":304651,"line_start":164,"line_end":164,"column_start":5,"column_end":13},"name":"Unsigned","qualname":"::ir::enum_ty::EnumVariantValue::Unsigned","value":"EnumVariantValue::Unsigned(u64)","parent":{"krate":0,"index":3554},"children":[],"decl_id":null,"docs":" An unsigned constant.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3554},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304545,"byte_end":304561,"line_start":159,"line_end":159,"column_start":10,"column_end":26},"name":"EnumVariantValue","qualname":"::ir::enum_ty::EnumVariantValue","value":"EnumVariantValue::{Signed, Unsigned}","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1217}],"decl_id":null,"docs":" A constant value assigned to an enumeration variant.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304536,"byte_end":304659,"line_start":159,"line_end":165,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304536,"byte_end":304659,"line_start":159,"line_end":165,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304757,"byte_end":304760,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<EnumVariant>::new","value":"fn (name: String, comment: Option<String>, val: EnumVariantValue, custom_behavior: Option<EnumVariantCustomBehavior>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new enumeration variant from the given parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":305150,"byte_end":305154,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"name","qualname":"<EnumVariant>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this variant's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":305243,"byte_end":305246,"line_start":188,"line_end":188,"column_start":12,"column_end":15},"name":"val","qualname":"<EnumVariant>::val","value":"fn (&self) -> EnumVariantValue","parent":null,"children":[],"decl_id":null,"docs":" Get this variant's value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":305412,"byte_end":305432,"line_start":194,"line_end":194,"column_start":12,"column_end":32},"name":"force_constification","qualname":"<EnumVariant>::force_constification","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this variant should be enforced to be a constant by code\n generation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":305680,"byte_end":305686,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"hidden","qualname":"<EnumVariant>::hidden","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the current variant should be hidden completely from the\n resulting rust enum.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1223},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306424,"byte_end":306432,"line_start":20,"line_end":20,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::function::FunctionKind::Function","value":"FunctionKind::Function","parent":{"krate":0,"index":3596},"children":[],"decl_id":null,"docs":" A plain, free function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1225},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306469,"byte_end":306475,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"name":"Method","qualname":"::ir::function::FunctionKind::Method","value":"FunctionKind::Method(MethodKind)","parent":{"krate":0,"index":3596},"children":[],"decl_id":null,"docs":" A method of some kind.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3596},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306373,"byte_end":306385,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"FunctionKind","qualname":"::ir::function::FunctionKind","value":"FunctionKind::{Function, Method}","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1225}],"decl_id":null,"docs":" What kind of a function are we looking at?\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306364,"byte_end":306490,"line_start":18,"line_end":23,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3614},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":307511,"byte_end":307519,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"Function","qualname":"::ir::function::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1237}],"decl_id":null,"docs":" A function declaration, with a signature, arguments, and argument names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":307946,"byte_end":307949,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Function>::new","value":"fn (name: String, mangled_name: Option<String>, sig: ItemId, comment: Option<String>, kind: FunctionKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308364,"byte_end":308368,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this function's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308457,"byte_end":308469,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"mangled_name","qualname":"<Function>::mangled_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this function's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308601,"byte_end":308610,"line_start":95,"line_end":95,"column_start":12,"column_end":21},"name":"signature","qualname":"<Function>::signature","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this function's signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308705,"byte_end":308709,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"kind","qualname":"<Function>::kind","value":"fn (&self) -> FunctionKind","parent":null,"children":[],"decl_id":null,"docs":" Get this function's kind.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309453,"byte_end":309458,"line_start":127,"line_end":127,"column_start":5,"column_end":10},"name":"Known","qualname":"::ir::function::Abi::Known","value":"Abi::Known(abi::Abi)","parent":{"krate":0,"index":3620},"children":[],"decl_id":null,"docs":" A known ABI, that rust also understand.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309509,"byte_end":309516,"line_start":129,"line_end":129,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::ir::function::Abi::Unknown","value":"Abi::Unknown(CXCallingConv)","parent":{"krate":0,"index":3620},"children":[],"decl_id":null,"docs":" An unknown or invalid ABI.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3620},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309395,"byte_end":309398,"line_start":125,"line_end":125,"column_start":10,"column_end":13},"name":"Abi","qualname":"::ir::function::Abi","value":"Abi::{Known, Unknown}","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1243}],"decl_id":null,"docs":" An ABI extracted from a clang cursor.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309386,"byte_end":309534,"line_start":125,"line_end":130,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3632},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309789,"byte_end":309800,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"FunctionSig","qualname":"::ir::function::FunctionSig","value":"FunctionSig {  }","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253}],"decl_id":null,"docs":" A function signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":313279,"byte_end":313282,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<FunctionSig>::new","value":"fn (return_type: ItemId, arguments: Vec<(Option<String>, ItemId)>, is_variadic: bool, abi: Abi) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":313702,"byte_end":313709,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<FunctionSig>::from_ty","value":"fn (ty: &clang::Type, cursor: &clang::Cursor, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function signature from the given Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318158,"byte_end":318169,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"return_type","qualname":"<FunctionSig>::return_type","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's return type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318299,"byte_end":318313,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"argument_types","qualname":"<FunctionSig>::argument_types","value":"fn (&self) -> &[(Option<String>, ItemId)]","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's argument (name, type) pairs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318444,"byte_end":318447,"line_start":382,"line_end":382,"column_start":12,"column_end":15},"name":"abi","qualname":"<FunctionSig>::abi","value":"fn (&self) -> Abi","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's ABI.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318544,"byte_end":318555,"line_start":387,"line_end":387,"column_start":12,"column_end":23},"name":"is_variadic","qualname":"<FunctionSig>::is_variadic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this function signature variadic?\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322378,"byte_end":322382,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ir::int::IntKind::Bool","value":"IntKind::Bool","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `bool`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322414,"byte_end":322419,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"SChar","qualname":"::ir::int::IntKind::SChar","value":"IntKind::SChar","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `signed char`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322454,"byte_end":322459,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"UChar","qualname":"::ir::int::IntKind::UChar","value":"IntKind::UChar","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `unsigned char`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1263},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322537,"byte_end":322541,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Char","qualname":"::ir::int::IntKind::Char","value":"IntKind::Char { is_signed }","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A platform-dependent `char` type, with the signedness support.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322664,"byte_end":322669,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"Short","qualname":"::ir::int::IntKind::Short","value":"IntKind::Short","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `short`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322705,"byte_end":322711,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"UShort","qualname":"::ir::int::IntKind::UShort","value":"IntKind::UShort","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `unsigned short`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322736,"byte_end":322739,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::int::IntKind::Int","value":"IntKind::Int","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `int`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322773,"byte_end":322777,"line_start":31,"line_end":31,"column_start":5,"column_end":9},"name":"UInt","qualname":"::ir::int::IntKind::UInt","value":"IntKind::UInt","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `unsigned int`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322802,"byte_end":322806,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"Long","qualname":"::ir::int::IntKind::Long","value":"IntKind::Long","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322841,"byte_end":322846,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"ULong","qualname":"::ir::int::IntKind::ULong","value":"IntKind::ULong","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `unsigned long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322876,"byte_end":322884,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"LongLong","qualname":"::ir::int::IntKind::LongLong","value":"IntKind::LongLong","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `long long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322924,"byte_end":322933,"line_start":43,"line_end":43,"column_start":5,"column_end":14},"name":"ULongLong","qualname":"::ir::int::IntKind::ULongLong","value":"IntKind::ULongLong","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `unsigned long long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322972,"byte_end":322974,"line_start":46,"line_end":46,"column_start":5,"column_end":7},"name":"I8","qualname":"::ir::int::IntKind::I8","value":"IntKind::I8","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 8-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323015,"byte_end":323017,"line_start":49,"line_end":49,"column_start":5,"column_end":7},"name":"U8","qualname":"::ir::int::IntKind::U8","value":"IntKind::U8","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 8-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323057,"byte_end":323060,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"I16","qualname":"::ir::int::IntKind::I16","value":"IntKind::I16","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 16-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323111,"byte_end":323114,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"U16","qualname":"::ir::int::IntKind::U16","value":"IntKind::U16","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" Either a `char16_t` or a `wchar_t`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323154,"byte_end":323157,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"I32","qualname":"::ir::int::IntKind::I32","value":"IntKind::I32","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 32-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323199,"byte_end":323202,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"U32","qualname":"::ir::int::IntKind::U32","value":"IntKind::U32","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 32-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323242,"byte_end":323245,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"I64","qualname":"::ir::int::IntKind::I64","value":"IntKind::I64","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 64-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323287,"byte_end":323290,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"U64","qualname":"::ir::int::IntKind::U64","value":"IntKind::U64","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A 64-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1299},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323319,"byte_end":323323,"line_start":70,"line_end":70,"column_start":5,"column_end":9},"name":"I128","qualname":"::ir::int::IntKind::I128","value":"IntKind::I128","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" An `int128_t`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323353,"byte_end":323357,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"U128","qualname":"::ir::int::IntKind::U128","value":"IntKind::U128","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A `uint128_t`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1303},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323456,"byte_end":323462,"line_start":77,"line_end":77,"column_start":5,"column_end":11},"name":"Custom","qualname":"::ir::int::IntKind::Custom","value":"IntKind::Custom { name, is_signed }","parent":{"krate":0,"index":3644},"children":[],"decl_id":null,"docs":" A custom integer type, used to allow custom macro types depending on\n range.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3644},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322346,"byte_end":322353,"line_start":5,"line_end":5,"column_start":10,"column_end":17},"name":"IntKind","qualname":"::ir::int::IntKind","value":"IntKind::{Bool, SChar, UChar, Char, Short, UShort, Int, UInt, Long, ULong, LongLong, ULongLong, I8, U8, I16, U16, I32, U32, I64, U64, I128, U128, Custom}","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303}],"decl_id":null,"docs":" Which integral type are we dealing with?\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322337,"byte_end":323649,"line_start":5,"line_end":83,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":322337,"byte_end":323649,"line_start":5,"line_end":83,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323715,"byte_end":323724,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"is_signed","qualname":"<IntKind>::is_signed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this integral type signed?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":324359,"byte_end":324369,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"known_size","qualname":"<IntKind>::known_size","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If this type has a known size, return it (in bytes). This is to\n alleviate libclang sometimes not giving us a layout (like in the case\n when an enum is defined inside a class with template parameters).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":324748,"byte_end":324766,"line_start":118,"line_end":118,"column_start":12,"column_end":30},"name":"signedness_matches","qualname":"<IntKind>::signedness_matches","value":"fn (&self, val: i64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this type's signedness matches the value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1742},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":327249,"byte_end":327254,"line_start":70,"line_end":70,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::item::IsOpaque::Extra","value":"type Extra;","parent":{"krate":0,"index":1740},"children":[],"decl_id":null,"docs":" Extra context the IR thing needs to determine if it is opaque or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3696},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":336215,"byte_end":336219,"line_start":361,"line_end":361,"column_start":12,"column_end":16},"name":"Item","qualname":"::ir::item::Item","value":"Item {  }","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1323},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339}],"decl_id":null,"docs":" An item is the base of the bindgen representation, it can be either a\n module, a type, a function, or a variable (see `ItemKind` for more\n information).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":337799,"byte_end":337802,"line_start":410,"line_end":410,"column_start":12,"column_end":15},"name":"new","qualname":"<Item>::new","value":"fn (id: ItemId, comment: Option<String>, annotations: Option<Annotations>, parent_id: ItemId, kind: ItemKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Item`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":338558,"byte_end":338573,"line_start":432,"line_end":432,"column_start":12,"column_end":27},"name":"new_opaque_type","qualname":"<Item>::new_opaque_type","value":"fn (with_id: ItemId, ty: &clang::Type, ctx: &mut BindgenContext) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Construct a new opaque item type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":339003,"byte_end":339005,"line_start":444,"line_end":444,"column_start":12,"column_end":14},"name":"id","qualname":"<Item>::id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":339174,"byte_end":339183,"line_start":451,"line_end":451,"column_start":12,"column_end":21},"name":"parent_id","qualname":"<Item>::parent_id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s parent's identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":339365,"byte_end":339391,"line_start":458,"line_end":458,"column_start":12,"column_end":38},"name":"set_parent_for_replacement","qualname":"<Item>::set_parent_for_replacement","value":"fn (&mut self, id: ItemId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set this item's parent id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":339603,"byte_end":339616,"line_start":465,"line_end":465,"column_start":12,"column_end":25},"name":"codegen_depth","qualname":"<Item>::codegen_depth","value":"fn (&self, ctx: &BindgenContext) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the depth this item is indented to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":340171,"byte_end":340178,"line_start":483,"line_end":483,"column_start":12,"column_end":19},"name":"comment","qualname":"<Item>::comment","value":"fn (&self, ctx: &BindgenContext) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s comment, if it has any, already preprocessed and with\n the right indentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":340486,"byte_end":340490,"line_start":494,"line_end":494,"column_start":12,"column_end":16},"name":"kind","qualname":"<Item>::kind","value":"fn (&self) -> &ItemKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of item is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":340603,"byte_end":340611,"line_start":499,"line_end":499,"column_start":12,"column_end":20},"name":"kind_mut","qualname":"<Item>::kind_mut","value":"fn (&mut self) -> &mut ItemKind","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this item's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":340989,"byte_end":340997,"line_start":508,"line_end":508,"column_start":12,"column_end":20},"name":"local_id","qualname":"<Item>::local_id","value":"fn (&self, ctx: &BindgenContext) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an identifier that differentiates this item from its siblings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":341554,"byte_end":341573,"line_start":522,"line_end":522,"column_start":12,"column_end":31},"name":"next_child_local_id","qualname":"<Item>::next_child_local_id","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an identifier that differentiates a child of this item of other\n related items.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":342371,"byte_end":342382,"line_start":546,"line_end":546,"column_start":12,"column_end":23},"name":"is_toplevel","qualname":"<Item>::is_toplevel","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this item is a top-level item, from the point of view of\n bindgen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":343341,"byte_end":343352,"line_start":574,"line_end":574,"column_start":12,"column_end":23},"name":"expect_type","qualname":"<Item>::expect_type","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Type`. Panic if this is some\n other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":343535,"byte_end":343542,"line_start":580,"line_end":580,"column_start":12,"column_end":19},"name":"as_type","qualname":"<Item>::as_type","value":"fn (&self) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Type`, or `None` if this is\n some other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":343729,"byte_end":343744,"line_start":586,"line_end":586,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<Item>::expect_function","value":"fn (&self) -> &Function","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Function`. Panic if this is\n some other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1864},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":343854,"byte_end":343863,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"is_module","qualname":"<Item>::is_module","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item a module?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":344038,"byte_end":344049,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"annotations","qualname":"<Item>::annotations","value":"fn (&self) -> &Annotations","parent":null,"children":[],"decl_id":null,"docs":" Get this item's annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":344252,"byte_end":344261,"line_start":606,"line_end":606,"column_start":12,"column_end":21},"name":"is_hidden","qualname":"<Item>::is_hidden","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this item should be hidden.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1870},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":344571,"byte_end":344582,"line_start":614,"line_end":614,"column_start":12,"column_end":23},"name":"is_type_ref","qualname":"<Item>::is_type_ref","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a reference to another type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":344711,"byte_end":344717,"line_start":619,"line_end":619,"column_start":12,"column_end":18},"name":"is_var","qualname":"<Item>::is_var","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item a var type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":344889,"byte_end":344893,"line_start":627,"line_end":627,"column_start":12,"column_end":16},"name":"name","qualname":"<Item>::name","value":"fn <'item, 'ctx> (&'item self, ctx: &'item BindgenContext<'ctx>) -> NameOptions<'item, 'ctx>","parent":null,"children":[],"decl_id":null,"docs":" Take out item NameOptions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":346237,"byte_end":346260,"line_start":665,"line_end":665,"column_start":12,"column_end":35},"name":"full_disambiguated_name","qualname":"<Item>::full_disambiguated_name","value":"fn (&self, ctx: &BindgenContext) -> String","parent":null,"children":[],"decl_id":null,"docs":" Create a fully disambiguated name for an item, including template\n parameters if it is a type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":350628,"byte_end":350647,"line_start":777,"line_end":777,"column_start":12,"column_end":31},"name":"real_canonical_name","qualname":"<Item>::real_canonical_name","value":"fn (&self, ctx: &BindgenContext, opt: &NameOptions) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical name without taking into account the replaces\n annotation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1890},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":352743,"byte_end":352753,"line_start":838,"line_end":838,"column_start":12,"column_end":22},"name":"exposed_id","qualname":"<Item>::exposed_id","value":"fn (&self, ctx: &BindgenContext) -> String","parent":null,"children":[],"decl_id":null,"docs":" The exposed id that represents an unique id among the siblings of a\n given item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":353604,"byte_end":353613,"line_start":859,"line_end":859,"column_start":12,"column_end":21},"name":"as_module","qualname":"<Item>::as_module","value":"fn (&self) -> Option<&Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's `Module`, or `None` if this is not a\n `Module` item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":353884,"byte_end":353897,"line_start":868,"line_end":868,"column_start":12,"column_end":25},"name":"as_module_mut","qualname":"<Item>::as_module_mut","value":"fn (&mut self) -> Option<&mut Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this item's `Module`, or `None` if this is\n not a `Module` item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":355328,"byte_end":355350,"line_start":906,"line_end":906,"column_start":12,"column_end":34},"name":"is_enabled_for_codegen","qualname":"<Item>::is_enabled_for_codegen","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item of a kind that is enabled for code generation?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3744},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":382417,"byte_end":382428,"line_start":1632,"line_end":1632,"column_start":12,"column_end":23},"name":"NameOptions","qualname":"::ir::item::NameOptions","value":"NameOptions {  }","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1351}],"decl_id":null,"docs":" Builder struct for naming variations, which hold inside different\n flags for naming options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":382654,"byte_end":382657,"line_start":1642,"line_end":1642,"column_start":12,"column_end":15},"name":"new","qualname":"<NameOptions<'item, 'ctx>>::new","value":"fn (item: &'item Item, ctx: &'item BindgenContext<'ctx>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `NameOptions`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":383013,"byte_end":383030,"line_start":1652,"line_end":1652,"column_start":12,"column_end":29},"name":"within_namespaces","qualname":"<NameOptions<'item, 'ctx>>::within_namespaces","value":"fn (&mut self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the name without the item's containing C++ namespaces mangled\n into it. In other words, the item's name within the item's namespace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":383161,"byte_end":383164,"line_start":1658,"line_end":1658,"column_start":12,"column_end":15},"name":"get","qualname":"<NameOptions<'item, 'ctx>>::get","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Construct a name `String`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1357},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383669,"byte_end":383675,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Module","qualname":"::ir::item_kind::ItemKind::Module","value":"ItemKind::Module(Module)","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":" A module, created implicitly once (the root module), or via C++\n namespaces.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383762,"byte_end":383766,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Type","qualname":"::ir::item_kind::ItemKind::Type","value":"ItemKind::Type(Type)","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":" A type declared in any of the multiple ways it can be declared.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1365},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383821,"byte_end":383829,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::item_kind::ItemKind::Function","value":"ItemKind::Function(Function)","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":" A function or method declaration.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1369},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383900,"byte_end":383903,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Var","qualname":"::ir::item_kind::ItemKind::Var","value":"ItemKind::Var(Var)","parent":{"krate":0,"index":3750},"children":[],"decl_id":null,"docs":" A variable declaration, most likely a static.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3750},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383562,"byte_end":383570,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"ItemKind","qualname":"::ir::item_kind::ItemKind","value":"ItemKind::{Module, Type, Function, Var}","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1361},{"krate":0,"index":1365},{"krate":0,"index":1369}],"decl_id":null,"docs":" A item we parse and translate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":384049,"byte_end":384058,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"as_module","qualname":"<ItemKind>::as_module","value":"fn (&self) -> Option<&Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Module`, or `None` if it\n is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":384266,"byte_end":384275,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"kind_name","qualname":"<ItemKind>::kind_name","value":"fn (&self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Transform our `ItemKind` into a string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":384555,"byte_end":384564,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"is_module","qualname":"<ItemKind>::is_module","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a module?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":384743,"byte_end":384756,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"expect_module","qualname":"<ItemKind>::expect_module","value":"fn (&self) -> &Module","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Module`, or panic if it\n is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":384954,"byte_end":384965,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"as_function","qualname":"<ItemKind>::as_function","value":"fn (&self) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Function`, or `None` if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":385153,"byte_end":385164,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"is_function","qualname":"<ItemKind>::is_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a function?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":385347,"byte_end":385362,"line_start":75,"line_end":75,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<ItemKind>::expect_function","value":"fn (&self) -> &Function","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Function`, or panic if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2022},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":385562,"byte_end":385569,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"as_type","qualname":"<ItemKind>::as_type","value":"fn (&self) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Type`, or `None` if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":385832,"byte_end":385843,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"as_type_mut","qualname":"<ItemKind>::as_type_mut","value":"fn (&mut self) -> Option<&mut Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this `ItemKind`'s underying `Type`, or `None`\n if it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386027,"byte_end":386034,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"is_type","qualname":"<ItemKind>::is_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386209,"byte_end":386220,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"expect_type","qualname":"<ItemKind>::expect_type","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Type`, or panic if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2030},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386407,"byte_end":386413,"line_start":110,"line_end":110,"column_start":12,"column_end":18},"name":"as_var","qualname":"<ItemKind>::as_var","value":"fn (&self) -> Option<&Var>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Var`, or `None` if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386585,"byte_end":386591,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"is_var","qualname":"<ItemKind>::is_var","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a variable?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2034},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386764,"byte_end":386774,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"expect_var","qualname":"<ItemKind>::expect_var","value":"fn (&self) -> &Var","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Var`, or panic if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3756},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":387916,"byte_end":387922,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"Layout","qualname":"::ir::layout::Layout","value":"Layout { size, align, packed }","parent":null,"children":[{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377}],"decl_id":null,"docs":" A type that represents the struct layout of a type.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":387905,"byte_end":388141,"line_start":11,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":387977,"byte_end":387981,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"size","qualname":"::ir::layout::Layout::size","value":"usize","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" The size (in bytes) of this layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388047,"byte_end":388052,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"align","qualname":"::ir::layout::Layout::align","value":"usize","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" The alignment (in bytes) of this layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1377},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388126,"byte_end":388132,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"packed","qualname":"::ir::layout::Layout::packed","value":"bool","parent":{"krate":0,"index":3756},"children":[],"decl_id":null,"docs":" Whether this layout's members are packed or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388524,"byte_end":388527,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Layout>::new","value":"fn (size: usize, align: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Layout` with the given `size` and `align`. It is not\n packed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388795,"byte_end":388803,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"for_size","qualname":"<Layout>::for_size","value":"fn (size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a non-packed layout for a given size, trying to use the maximum\n alignment possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389162,"byte_end":389169,"line_start":55,"line_end":55,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Layout>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a zero-sized layout?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389286,"byte_end":389290,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"zero","qualname":"<Layout>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a zero-sized layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389388,"byte_end":389394,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"opaque","qualname":"<Layout>::opaque","value":"fn (&self) -> Opaque","parent":null,"children":[],"decl_id":null,"docs":" Get this layout as an opaque type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3774},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389569,"byte_end":389575,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"Opaque","qualname":"::ir::layout::Opaque","value":"","parent":null,"children":[],"decl_id":null,"docs":" When we are treating a type as opaque, it is just a blob with a `Layout`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389678,"byte_end":389691,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"from_clang_ty","qualname":"<Opaque>::from_clang_ty","value":"fn (ty: &clang::Type) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a new opaque type from the given clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390000,"byte_end":390025,"line_start":84,"line_end":84,"column_start":12,"column_end":37},"name":"known_rust_type_for_array","qualname":"<Opaque>::known_rust_type_for_array","value":"fn (&self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Return the known rust type we should use to create a correctly-aligned\n field with this layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390390,"byte_end":390400,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"array_size","qualname":"<Opaque>::array_size","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the array size that an opaque type for this layout should have if\n we know the correct type for it, or `None` otherwise.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1383},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":391844,"byte_end":391850,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::module::ModuleKind::Normal","value":"ModuleKind::Normal","parent":{"krate":0,"index":3790},"children":[],"decl_id":null,"docs":" This module is not inline.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1385},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":391920,"byte_end":391926,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ir::module::ModuleKind::Inline","value":"ModuleKind::Inline","parent":{"krate":0,"index":3790},"children":[],"decl_id":null,"docs":" This module is inline, as in `inline namespace foo {}`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3790},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":391792,"byte_end":391802,"line_start":13,"line_end":13,"column_start":10,"column_end":20},"name":"ModuleKind","qualname":"::ir::module::ModuleKind","value":"ModuleKind::{Normal, Inline}","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1385}],"decl_id":null,"docs":" Whether this module is inline or not.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":391783,"byte_end":391929,"line_start":13,"line_end":18,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":391783,"byte_end":391929,"line_start":13,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3810},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392004,"byte_end":392010,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Module","qualname":"::ir::module::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391}],"decl_id":null,"docs":" A module, as in, a C++ namespace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392305,"byte_end":392308,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Module>::new","value":"fn (name: Option<String>, kind: ModuleKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Module`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392522,"byte_end":392526,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"name","qualname":"<Module>::name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this module's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392670,"byte_end":392682,"line_start":47,"line_end":47,"column_start":12,"column_end":24},"name":"children_mut","qualname":"<Module>::children_mut","value":"fn (&mut self) -> &mut ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this module's children.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392793,"byte_end":392801,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"children","qualname":"<Module>::children","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get this module's children.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392906,"byte_end":392915,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"is_inline","qualname":"<Module>::is_inline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this namespace is inline.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2198},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":400837,"byte_end":400842,"line_start":180,"line_end":180,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::template::AsTemplateParam::Extra","value":"type Extra;","parent":{"krate":0,"index":2196},"children":[],"decl_id":null,"docs":" Any extra information the implementor might need to make this decision.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3820},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":401376,"byte_end":401397,"line_start":196,"line_end":196,"column_start":12,"column_end":33},"name":"TemplateInstantiation","qualname":"::ir::template::TemplateInstantiation","value":"TemplateInstantiation {  }","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1395}],"decl_id":null,"docs":" A concrete instantiation of a generic template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":401750,"byte_end":401753,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<TemplateInstantiation>::new","value":"fn <I> (template_definition: ItemId, template_args: I) -> TemplateInstantiation","parent":null,"children":[],"decl_id":null,"docs":" Construct a new template instantiation from the given parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":402137,"byte_end":402156,"line_start":218,"line_end":218,"column_start":12,"column_end":31},"name":"template_definition","qualname":"<TemplateInstantiation>::template_definition","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get the template definition for this instantiation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":402290,"byte_end":402308,"line_start":223,"line_end":223,"column_start":12,"column_end":30},"name":"template_arguments","qualname":"<TemplateInstantiation>::template_arguments","value":"fn (&self) -> &[ItemId]","parent":null,"children":[],"decl_id":null,"docs":" Get the concrete template arguments used in this instantiation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":402433,"byte_end":402440,"line_start":228,"line_end":228,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<TemplateInstantiation>::from_ty","value":"fn (ty: &clang::Type, ctx: &mut BindgenContext) -> Option<TemplateInstantiation>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `TemplateInstantiation` from a clang `Type`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":405080,"byte_end":405094,"line_start":296,"line_end":296,"column_start":12,"column_end":26},"name":"has_destructor","qualname":"<TemplateInstantiation>::has_destructor","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this instantiation have a destructor?\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2324},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":418286,"byte_end":418291,"line_start":367,"line_end":367,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::traversal::Trace::Extra","value":"type Extra;","parent":{"krate":0,"index":2322},"children":[],"decl_id":null,"docs":" If a particular type needs extra information beyond what it has in\n `self` and `context` to find its referenced items, its implementation\n can define this associated type, forcing callers to pass the needed\n information through.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3912},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":423619,"byte_end":423623,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Type","qualname":"::ir::ty::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463}],"decl_id":null,"docs":" The base representation of a type in bindgen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":424378,"byte_end":424385,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"as_comp","qualname":"<Type>::as_comp","value":"fn (&self) -> Option<&CompInfo>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying `CompInfo` for this type, or `None` if this is some\n other kind of type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":424671,"byte_end":424682,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"as_comp_mut","qualname":"<Type>::as_comp_mut","value":"fn (&mut self) -> Option<&mut CompInfo>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying `CompInfo` for this type as a mutable reference, or\n `None` if this is some other kind of type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":424882,"byte_end":424885,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<Type>::new","value":"fn (name: Option<String>, layout: Option<Layout>, kind: TypeKind, is_const: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Type`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425221,"byte_end":425225,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"kind","qualname":"<Type>::kind","value":"fn (&self) -> &TypeKind","parent":null,"children":[],"decl_id":null,"docs":" Which kind of type is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425338,"byte_end":425346,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"kind_mut","qualname":"<Type>::kind_mut","value":"fn (&mut self) -> &mut TypeKind","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this type's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425448,"byte_end":425452,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"name","qualname":"<Type>::name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this type's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425576,"byte_end":425583,"line_start":93,"line_end":93,"column_start":12,"column_end":19},"name":"is_comp","qualname":"<Type>::is_comp","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a compound type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2436},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425767,"byte_end":425775,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"is_named","qualname":"<Type>::is_named","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type of kind `TypeKind::Named`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2438},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":425955,"byte_end":425980,"line_start":109,"line_end":109,"column_start":12,"column_end":37},"name":"is_template_instantiation","qualname":"<Type>::is_template_instantiation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a template instantiation type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2440},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":426172,"byte_end":426189,"line_start":117,"line_end":117,"column_start":12,"column_end":29},"name":"is_template_alias","qualname":"<Type>::is_template_alias","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a template alias type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2442},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":426367,"byte_end":426378,"line_start":125,"line_end":125,"column_start":12,"column_end":23},"name":"is_function","qualname":"<Type>::is_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a function type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2444},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":426548,"byte_end":426555,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"is_enum","qualname":"<Type>::is_enum","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an enum type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":426739,"byte_end":426758,"line_start":141,"line_end":141,"column_start":12,"column_end":31},"name":"is_builtin_or_named","qualname":"<Type>::is_builtin_or_named","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this either a builtin or named type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2448},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":427252,"byte_end":427257,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"name":"named","qualname":"<Type>::named","value":"fn (name: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new named type, with name `name`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2450},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":427501,"byte_end":427509,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Type>::is_float","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a floating point type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2452},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":427678,"byte_end":427685,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"is_bool","qualname":"<Type>::is_bool","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a boolean type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2454},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":427864,"byte_end":427874,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Type>::is_integer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an integer type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2456},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":428051,"byte_end":428059,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Type>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a `const` qualified type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2458},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":428162,"byte_end":428173,"line_start":197,"line_end":197,"column_start":12,"column_end":23},"name":"is_type_ref","qualname":"<Type>::is_type_ref","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a reference to another type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2460},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":428411,"byte_end":428430,"line_start":206,"line_end":206,"column_start":12,"column_end":31},"name":"is_incomplete_array","qualname":"<Type>::is_incomplete_array","value":"fn (&self, ctx: &BindgenContext) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Is this a incomplete array type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2462},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":428842,"byte_end":428848,"line_start":219,"line_end":219,"column_start":12,"column_end":18},"name":"layout","qualname":"<Type>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" What is the layout of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2466},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":429652,"byte_end":429666,"line_start":241,"line_end":241,"column_start":12,"column_end":26},"name":"has_destructor","qualname":"<Type>::has_destructor","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this type has a destructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":430364,"byte_end":430385,"line_start":260,"line_end":260,"column_start":12,"column_end":33},"name":"is_invalid_named_type","qualname":"<Type>::is_invalid_named_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this named type is an invalid C++ identifier. This is done to\n avoid generating invalid code with some cases we can't handle, see:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":430784,"byte_end":430803,"line_start":272,"line_end":272,"column_start":12,"column_end":31},"name":"is_valid_identifier","qualname":"<Type>::is_valid_identifier","value":"fn (name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the name looks like an identifier,\n i.e. is alphanumeric (including '_') and does not start with a digit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":430918,"byte_end":430932,"line_start":277,"line_end":277,"column_start":12,"column_end":26},"name":"canonical_type","qualname":"<Type>::canonical_type","value":"fn <'tr> (&'tr self, ctx: &'tr BindgenContext) -> &'tr Type","parent":null,"children":[],"decl_id":null,"docs":" See safe_canonical_type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":431480,"byte_end":431499,"line_start":289,"line_end":289,"column_start":12,"column_end":31},"name":"safe_canonical_type","qualname":"<Type>::safe_canonical_type","value":"fn <'tr> (&'tr self, ctx: &'tr BindgenContext) -> Option<&'tr Type>","parent":null,"children":[],"decl_id":null,"docs":" Returns the canonical type of this type, that is, the \"inner type\".","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":432885,"byte_end":432917,"line_start":327,"line_end":327,"column_start":12,"column_end":44},"name":"should_be_traced_unconditionally","qualname":"<Type>::should_be_traced_unconditionally","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" There are some types we don't want to stop at when finding an opaque\n item, so we can arrive to the proper item that needs to be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1465},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442354,"byte_end":442359,"line_start":614,"line_end":614,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::ty::FloatKind::Float","value":"FloatKind::Float","parent":{"krate":0,"index":3918},"children":[],"decl_id":null,"docs":" A `float`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1467},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442385,"byte_end":442391,"line_start":616,"line_end":616,"column_start":5,"column_end":11},"name":"Double","qualname":"::ir::ty::FloatKind::Double","value":"FloatKind::Double","parent":{"krate":0,"index":3918},"children":[],"decl_id":null,"docs":" A `double`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1469},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442422,"byte_end":442432,"line_start":618,"line_end":618,"column_start":5,"column_end":15},"name":"LongDouble","qualname":"::ir::ty::FloatKind::LongDouble","value":"FloatKind::LongDouble","parent":{"krate":0,"index":3918},"children":[],"decl_id":null,"docs":" A `long double`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1471},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442462,"byte_end":442470,"line_start":620,"line_end":620,"column_start":5,"column_end":13},"name":"Float128","qualname":"::ir::ty::FloatKind::Float128","value":"FloatKind::Float128","parent":{"krate":0,"index":3918},"children":[],"decl_id":null,"docs":" A `__float128`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3918},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442319,"byte_end":442328,"line_start":612,"line_end":612,"column_start":10,"column_end":19},"name":"FloatKind","qualname":"::ir::ty::FloatKind","value":"FloatKind::{Float, Double, LongDouble, Float128}","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1471}],"decl_id":null,"docs":" The kind of float this type represents.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442310,"byte_end":442473,"line_start":612,"line_end":621,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442564,"byte_end":442574,"line_start":625,"line_end":625,"column_start":12,"column_end":22},"name":"known_size","qualname":"<FloatKind>::known_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" If this type has a known size, return it (in bytes).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1473},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442947,"byte_end":442951,"line_start":638,"line_end":638,"column_start":5,"column_end":9},"name":"Void","qualname":"::ir::ty::TypeKind::Void","value":"TypeKind::Void","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" The void type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1475},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442988,"byte_end":442995,"line_start":641,"line_end":641,"column_start":5,"column_end":12},"name":"NullPtr","qualname":"::ir::ty::TypeKind::NullPtr","value":"TypeKind::NullPtr","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" The `nullptr_t` type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1477},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443063,"byte_end":443067,"line_start":644,"line_end":644,"column_start":5,"column_end":9},"name":"Comp","qualname":"::ir::ty::TypeKind::Comp","value":"TypeKind::Comp(CompInfo)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A compound type, that is, a class, struct, or union.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1481},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443258,"byte_end":443264,"line_start":649,"line_end":649,"column_start":5,"column_end":11},"name":"Opaque","qualname":"::ir::ty::TypeKind::Opaque","value":"TypeKind::Opaque","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An opaque type that we just don't understand. All usage of this shoulf\n result in an opaque blob of bytes generated from the containing type's\n layout.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1483},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443369,"byte_end":443372,"line_start":653,"line_end":653,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::ty::TypeKind::Int","value":"TypeKind::Int(IntKind)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An integer type, of a given kind. `bool` and `char` are also considered\n integers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1487},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443419,"byte_end":443424,"line_start":656,"line_end":656,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::ty::TypeKind::Float","value":"TypeKind::Float(FloatKind)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A floating point type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1491},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443481,"byte_end":443488,"line_start":659,"line_end":659,"column_start":5,"column_end":12},"name":"Complex","qualname":"::ir::ty::TypeKind::Complex","value":"TypeKind::Complex(FloatKind)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A complex floating point type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1495},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443570,"byte_end":443575,"line_start":662,"line_end":662,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ir::ty::TypeKind::Alias","value":"TypeKind::Alias(ItemId)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A type alias, with a name, that points to another type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1499},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443699,"byte_end":443712,"line_start":666,"line_end":666,"column_start":5,"column_end":18},"name":"TemplateAlias","qualname":"::ir::ty::TypeKind::TemplateAlias","value":"TypeKind::TemplateAlias(ItemId, Vec<ItemId>)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A templated alias, pointing to an inner type, just as `Alias`, but with\n template parameters.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1505},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443781,"byte_end":443786,"line_start":669,"line_end":669,"column_start":5,"column_end":10},"name":"Array","qualname":"::ir::ty::TypeKind::Array","value":"TypeKind::Array(ItemId, usize)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An array of a type and a lenght.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1511},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443857,"byte_end":443865,"line_start":672,"line_end":672,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::ty::TypeKind::Function","value":"TypeKind::Function(FunctionSig)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A function type, with a given signature.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1515},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":443909,"byte_end":443913,"line_start":675,"line_end":675,"column_start":5,"column_end":9},"name":"Enum","qualname":"::ir::ty::TypeKind::Enum","value":"TypeKind::Enum(Enum)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An `enum` type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1519},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":444016,"byte_end":444023,"line_start":679,"line_end":679,"column_start":5,"column_end":12},"name":"Pointer","qualname":"::ir::ty::TypeKind::Pointer","value":"TypeKind::Pointer(ItemId)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A pointer to a type. The bool field represents whether it's const or\n not.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1523},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":444075,"byte_end":444087,"line_start":682,"line_end":682,"column_start":5,"column_end":17},"name":"BlockPointer","qualname":"::ir::ty::TypeKind::BlockPointer","value":"TypeKind::BlockPointer","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A pointer to an Apple block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1525},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":444144,"byte_end":444153,"line_start":685,"line_end":685,"column_start":5,"column_end":14},"name":"Reference","qualname":"::ir::ty::TypeKind::Reference","value":"TypeKind::Reference(ItemId)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A reference to a type, as in: int& foo().\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1529},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":444279,"byte_end":444300,"line_start":689,"line_end":689,"column_start":5,"column_end":26},"name":"TemplateInstantiation","qualname":"::ir::ty::TypeKind::TemplateInstantiation","value":"TypeKind::TemplateInstantiation(TemplateInstantiation)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An instantiation of an abstract template definition with a set of\n concrete template arguments.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1533},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":444688,"byte_end":444705,"line_start":698,"line_end":698,"column_start":5,"column_end":22},"name":"UnresolvedTypeRef","qualname":"::ir::ty::TypeKind::UnresolvedTypeRef","value":"TypeKind::UnresolvedTypeRef(clang::Type, clang::Cursor, Option<ItemId>)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A reference to a yet-to-resolve type. This stores the clang cursor\n itself, and postpones its resolution.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445004,"byte_end":445019,"line_start":707,"line_end":707,"column_start":5,"column_end":20},"name":"ResolvedTypeRef","qualname":"::ir::ty::TypeKind::ResolvedTypeRef","value":"TypeKind::ResolvedTypeRef(ItemId)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" An indirection to another type.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1545},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445087,"byte_end":445092,"line_start":710,"line_end":710,"column_start":5,"column_end":10},"name":"Named","qualname":"::ir::ty::TypeKind::Named","value":"TypeKind::Named","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" A named type, that is, a template parameter.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1547},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445166,"byte_end":445179,"line_start":713,"line_end":713,"column_start":5,"column_end":18},"name":"ObjCInterface","qualname":"::ir::ty::TypeKind::ObjCInterface","value":"TypeKind::ObjCInterface(ObjCInterface)","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" Objective C interface. Always referenced through a pointer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1551},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445253,"byte_end":445259,"line_start":716,"line_end":716,"column_start":5,"column_end":11},"name":"ObjCId","qualname":"::ir::ty::TypeKind::ObjCId","value":"TypeKind::ObjCId","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" Objective C 'id' type, points to any object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1553},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445300,"byte_end":445307,"line_start":719,"line_end":719,"column_start":5,"column_end":12},"name":"ObjCSel","qualname":"::ir::ty::TypeKind::ObjCSel","value":"TypeKind::ObjCSel","parent":{"krate":0,"index":3934},"children":[],"decl_id":null,"docs":" Objective C selector type\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3934},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442909,"byte_end":442917,"line_start":636,"line_end":636,"column_start":10,"column_end":18},"name":"TypeKind","qualname":"::ir::ty::TypeKind","value":"TypeKind::{Void, NullPtr, Comp, Opaque, Int, Float, Complex, Alias, TemplateAlias, Array, Function, Enum, Pointer, BlockPointer, Reference, TemplateInstantiation, UnresolvedTypeRef, ResolvedTypeRef, Named, ObjCInterface, ObjCId, ObjCSel}","parent":null,"children":[{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1487},{"krate":0,"index":1491},{"krate":0,"index":1495},{"krate":0,"index":1499},{"krate":0,"index":1505},{"krate":0,"index":1511},{"krate":0,"index":1515},{"krate":0,"index":1519},{"krate":0,"index":1523},{"krate":0,"index":1525},{"krate":0,"index":1529},{"krate":0,"index":1533},{"krate":0,"index":1541},{"krate":0,"index":1545},{"krate":0,"index":1547},{"krate":0,"index":1551},{"krate":0,"index":1553}],"decl_id":null,"docs":" The different kinds of types that we can parse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445600,"byte_end":445610,"line_start":727,"line_end":727,"column_start":12,"column_end":22},"name":"is_unsized","qualname":"<Type>::is_unsized","value":"fn (&self, ctx: &BindgenContext, itemid: &ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this type is unsized, that is, has no members. This is used to\n derive whether we should generate a dummy `_address` field for structs,\n to comply to the C and C++ layouts, that specify that every type needs\n to be addressable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":447424,"byte_end":447437,"line_start":772,"line_end":772,"column_start":12,"column_end":25},"name":"from_clang_ty","qualname":"<Type>::from_clang_ty","value":"fn (potential_id: ItemId, ty: &clang::Type, location: Cursor, parent_id: Option<ItemId>, ctx: &mut BindgenContext) -> Result<ParseResult<Self>, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" This is another of the nasty methods. This one is the one that takes\n care of the core logic of converting a clang type to a `Type`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474483,"byte_end":474487,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ir::var::VarType::Bool","value":"VarType::Bool(bool)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" A boolean.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1559},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474519,"byte_end":474522,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::var::VarType::Int","value":"VarType::Int(i64)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" An integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1563},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474566,"byte_end":474571,"line_start":23,"line_end":23,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::var::VarType::Float","value":"VarType::Float(f64)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" A floating point number.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474603,"byte_end":474607,"line_start":25,"line_end":25,"column_start":5,"column_end":9},"name":"Char","qualname":"::ir::var::VarType::Char","value":"VarType::Char(u8)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" A character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474670,"byte_end":474676,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"String","qualname":"::ir::var::VarType::String","value":"VarType::String(Vec<u8>)","parent":{"krate":0,"index":3970},"children":[],"decl_id":null,"docs":" A string, not necessarily well-formed utf-8.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3970},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474450,"byte_end":474457,"line_start":17,"line_end":17,"column_start":10,"column_end":17},"name":"VarType","qualname":"::ir::var::VarType","value":"VarType::{Bool, Int, Float, Char, String}","parent":null,"children":[{"krate":0,"index":1555},{"krate":0,"index":1559},{"krate":0,"index":1563},{"krate":0,"index":1567},{"krate":0,"index":1571}],"decl_id":null,"docs":" The type for a constant variable.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3976},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":474780,"byte_end":474783,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"Var","qualname":"::ir::var::Var","value":"Var {  }","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583}],"decl_id":null,"docs":" A `Var` is our intermediate representation of a variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2586},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475177,"byte_end":475180,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Var>::new","value":"fn (name: String, mangled: Option<String>, ty: ItemId, val: Option<VarType>, is_const: bool) -> Var","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Var`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475608,"byte_end":475616,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Var>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this variable `const` qualified?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475727,"byte_end":475730,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"val","qualname":"<Var>::val","value":"fn (&self) -> Option<&VarType>","parent":null,"children":[],"decl_id":null,"docs":" The value of this constant variable, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475838,"byte_end":475840,"line_start":74,"line_end":74,"column_start":12,"column_end":14},"name":"ty","qualname":"<Var>::ty","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475928,"byte_end":475932,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"name","qualname":"<Var>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":476029,"byte_end":476041,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"mangled_name","qualname":"<Var>::mangled_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's mangled name.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3986},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":486732,"byte_end":486745,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"ObjCInterface","qualname":"::ir::objc::ObjCInterface","value":"ObjCInterface {  }","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595}],"decl_id":null,"docs":" Objective C interface as used in TypeKind","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3992},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":487072,"byte_end":487082,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"ObjCMethod","qualname":"::ir::objc::ObjCMethod","value":"ObjCMethod {  }","parent":null,"children":[{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603}],"decl_id":null,"docs":" The objective c methods\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":487726,"byte_end":487730,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"name","qualname":"<ObjCInterface>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The name\n like, NSObject\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":487964,"byte_end":487973,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"rust_name","qualname":"<ObjCInterface>::rust_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Formats the name for rust\n Can be like NSObject, but with categories might be like NSObject_NSCoderMethods\n and protocols are like protocol_NSObject\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":488346,"byte_end":488353,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"methods","qualname":"<ObjCInterface>::methods","value":"fn (&self) -> &Vec<ObjCMethod>","parent":null,"children":[],"decl_id":null,"docs":" List of the methods defined in this interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":488483,"byte_end":488496,"line_start":93,"line_end":93,"column_start":12,"column_end":25},"name":"class_methods","qualname":"<ObjCInterface>::class_methods","value":"fn (&self) -> &Vec<ObjCMethod>","parent":null,"children":[],"decl_id":null,"docs":" List of the class methods defined in this interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":488629,"byte_end":488636,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<ObjCInterface>::from_ty","value":"fn (cursor: &clang::Cursor, ctx: &mut BindgenContext) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses the Objective C interface from the cursor\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":492239,"byte_end":492243,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"name","qualname":"<ObjCMethod>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original method selector name\n like, dataWithBytes:length:\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":492383,"byte_end":492392,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"rust_name","qualname":"<ObjCMethod>::rust_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Method name as converted to rust\n like, dataWithBytes_length_\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":492513,"byte_end":492522,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"signature","qualname":"<ObjCMethod>::signature","value":"fn (&self) -> &FunctionSig","parent":null,"children":[],"decl_id":null,"docs":" Returns the methods signature as FunctionSig\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":492622,"byte_end":492637,"line_start":207,"line_end":207,"column_start":12,"column_end":27},"name":"is_class_method","qualname":"<ObjCMethod>::is_class_method","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a class method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":492734,"byte_end":492752,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"format_method_call","qualname":"<ObjCMethod>::format_method_call","value":"fn (&self, args: &[String]) -> String","parent":null,"children":[],"decl_id":null,"docs":" Formats the method call\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1605},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494320,"byte_end":494327,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Recurse","qualname":"::parse::ParseError::Recurse","value":"ParseError::Recurse","parent":{"krate":0,"index":4004},"children":[],"decl_id":null,"docs":" Recurse down the current AST node's children.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1607},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494487,"byte_end":494495,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"Continue","qualname":"::parse::ParseError::Continue","value":"ParseError::Continue","parent":{"krate":0,"index":4004},"children":[],"decl_id":null,"docs":" Continue on to the next sibling AST node, or back up to the parent's\n siblings if we've exhausted all of this node's siblings (and so on).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4004},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494249,"byte_end":494259,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"ParseError","qualname":"::parse::ParseError","value":"ParseError::{Recurse, Continue}","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1607}],"decl_id":null,"docs":" Not so much an error in the traditional sense, but a control flow message\n when walking over Clang's AST with a cursor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1611},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494684,"byte_end":494699,"line_start":23,"line_end":23,"column_start":5,"column_end":20},"name":"AlreadyResolved","qualname":"::parse::ParseResult::AlreadyResolved","value":"ParseResult::AlreadyResolved(ItemId)","parent":{"krate":0,"index":4010},"children":[],"decl_id":null,"docs":" We've already resolved this item before, here is the extant `ItemId` for\n it.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1615},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494842,"byte_end":494845,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"New","qualname":"::parse::ParseResult::New","value":"ParseResult::New(T, Option<clang::Cursor>)","parent":{"krate":0,"index":4010},"children":[],"decl_id":null,"docs":" This is a newly parsed item. If the cursor is `Some`, it points to the\n AST node where the new `T` was declared.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4010},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":494570,"byte_end":494581,"line_start":20,"line_end":20,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::parse::ParseResult","value":"ParseResult::{AlreadyResolved, New}","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1615}],"decl_id":null,"docs":" The result of parsing a Clang AST node.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4016},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":497847,"byte_end":497855,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"RegexSet","qualname":"::regex_set::RegexSet","value":"RegexSet {  }","parent":null,"children":[{"krate":0,"index":1623},{"krate":0,"index":1625}],"decl_id":null,"docs":" A dynamic set of regular expressions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":497963,"byte_end":497971,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<RegexSet>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this set empty?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":498095,"byte_end":498101,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"extend","qualname":"<RegexSet>::extend","value":"fn <I, S> (&mut self, iter: I) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Extend this set with every regex in the iterator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":498337,"byte_end":498343,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"insert","qualname":"<RegexSet>::insert","value":"fn <S> (&mut self, string: S) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Insert a new regex into this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":498565,"byte_end":498574,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"get_items","qualname":"<RegexSet>::get_items","value":"fn (&self) -> &[String]","parent":null,"children":[],"decl_id":null,"docs":" Returns slice of String from its field 'items'\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":498683,"byte_end":498690,"line_start":44,"line_end":44,"column_start":12,"column_end":19},"name":"get_set","qualname":"<RegexSet>::get_set","value":"fn (&self) -> Option<&RxSet>","parent":null,"children":[],"decl_id":null,"docs":" Returns reference of its field 'set'\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":498933,"byte_end":498938,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"build","qualname":"<RegexSet>::build","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Construct a RegexSet from the set of entries we've accumulated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2754},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":499260,"byte_end":499267,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"matches","qualname":"<RegexSet>::matches","value":"fn <S> (&self, string: S) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the given `string` match any of the regexes in this set?\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2780},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"callbacks","qualname":"::callbacks","value":"/home/k2/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.29.1/src/callbacks.rs","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2788},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794}],"decl_id":null,"docs":" A public API for more fine-grained customization of bindgen behavior.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2794},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503490,"byte_end":503504,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"ParseCallbacks","qualname":"::callbacks::ParseCallbacks","value":"ParseCallbacks: fmt::Debug + UnwindSafe","parent":null,"children":[{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2800}],"decl_id":null,"docs":" A trait to allow configuring different kinds of types in different\n situations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2796},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503608,"byte_end":503620,"line_start":13,"line_end":13,"column_start":8,"column_end":20},"name":"parsed_macro","qualname":"::callbacks::ParseCallbacks::parsed_macro","value":"fn (&self, _name: &str) -> ()","parent":{"krate":0,"index":2794},"children":[],"decl_id":null,"docs":" This function will be run on every macro that is identified\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503805,"byte_end":503814,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"int_macro","qualname":"::callbacks::ParseCallbacks::int_macro","value":"fn (&self, _name: &str, _value: i64) -> Option<IntKind>","parent":{"krate":0,"index":2794},"children":[],"decl_id":null,"docs":" The integer kind an integer macro should have, given a name and the\n value of that macro, or `None` if you want the default to be chosen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2800},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":504068,"byte_end":504089,"line_start":24,"line_end":24,"column_start":8,"column_end":29},"name":"enum_variant_behavior","qualname":"::callbacks::ParseCallbacks::enum_variant_behavior","value":"fn (&self, _enum_name: Option<&str>, _variant_name: &str, _variant_value: EnumVariantValue) -> Option<EnumVariantCustomBehavior>","parent":{"krate":0,"index":2794},"children":[],"decl_id":null,"docs":" This function should return whether, given the a given enum variant\n name, and value, returns whether this enum variant will forcibly be a\n constant.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4402},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11550151,"byte_end":11550156,"line_start":1450,"line_end":1450,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::CodeGenerator::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4400},"children":[],"decl_id":null,"docs":" Extra information from the caller.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4494},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11603092,"byte_end":11603097,"line_start":2077,"line_end":2077,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::FieldCodegen::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4492},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4716},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12013471,"byte_end":12013476,"line_start":5446,"line_end":5446,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::TryToOpaque::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4714},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4732},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12015455,"byte_end":12015460,"line_start":5490,"line_end":5490,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::TryToRustTy::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4730},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4738},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12015887,"byte_end":12015892,"line_start":5501,"line_end":5501,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::TryToRustTyOrOpaque::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4750},"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018128,"byte_end":12018133,"line_start":5547,"line_end":5547,"column_start":5,"column_end":10},"name":"Extra","qualname":"::codegen::ToRustTyOrOpaque::Extra","value":"type\n    Extra;","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5086},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2757,"byte_end":2770,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"CodegenConfig","qualname":"::CodegenConfig","value":"CodegenConfig { functions, types, vars, methods, constructors, destructors }","parent":null,"children":[{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895}],"decl_id":null,"docs":" A type used to indicate which kind of items do we have to generate.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2820,"byte_end":2829,"line_start":109,"line_end":109,"column_start":9,"column_end":18},"name":"functions","qualname":"::CodegenConfig::functions","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate functions.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1887},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2880,"byte_end":2885,"line_start":111,"line_end":111,"column_start":9,"column_end":14},"name":"types","qualname":"::CodegenConfig::types","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate types.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1889},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2940,"byte_end":2944,"line_start":113,"line_end":113,"column_start":9,"column_end":13},"name":"vars","qualname":"::CodegenConfig::vars","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate constants.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1891},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2997,"byte_end":3004,"line_start":115,"line_end":115,"column_start":9,"column_end":16},"name":"methods","qualname":"::CodegenConfig::methods","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate methods.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1893},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3062,"byte_end":3074,"line_start":117,"line_end":117,"column_start":9,"column_end":21},"name":"constructors","qualname":"::CodegenConfig::constructors","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate constructors.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1895},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3131,"byte_end":3142,"line_start":119,"line_end":119,"column_start":9,"column_end":20},"name":"destructors","qualname":"::CodegenConfig::destructors","value":"bool","parent":{"krate":0,"index":5086},"children":[],"decl_id":null,"docs":" Whether to generate destructors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3222,"byte_end":3225,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"all","qualname":"<CodegenConfig>::all","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate all kinds of items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3484,"byte_end":3491,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"nothing","qualname":"<CodegenConfig>::nothing","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate nothing.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5096},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4437,"byte_end":4444,"line_start":171,"line_end":171,"column_start":12,"column_end":19},"name":"Builder","qualname":"::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":1897},{"krate":0,"index":1899},{"krate":0,"index":1901}],"decl_id":null,"docs":" Configure and generate Rust bindings for a C/C++ header.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2872},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4693,"byte_end":4700,"line_start":179,"line_end":179,"column_start":8,"column_end":15},"name":"builder","qualname":"::builder","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Construct a new [`Builder`](./struct.Builder.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4838,"byte_end":4856,"line_start":185,"line_end":185,"column_start":12,"column_end":30},"name":"command_line_flags","qualname":"<Builder>::command_line_flags","value":"fn (&self) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":" Generates the command line flags use for creating `Builder`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13614,"byte_end":13620,"line_start":460,"line_end":460,"column_start":12,"column_end":18},"name":"header","qualname":"<Builder>::header","value":"fn <T> (mut self, header: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add an input C/C++ header to generate bindings for.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13883,"byte_end":13898,"line_start":468,"line_end":468,"column_start":12,"column_end":27},"name":"header_contents","qualname":"<Builder>::header_contents","value":"fn (mut self, name: &str, contents: &str) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add `contents` as an input C/C++ header named `name`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14092,"byte_end":14108,"line_start":474,"line_end":474,"column_start":12,"column_end":28},"name":"emit_ir_graphviz","qualname":"<Builder>::emit_ir_graphviz","value":"fn <T> (mut self, path: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Set the output graphviz file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14623,"byte_end":14640,"line_start":488,"line_end":488,"column_start":12,"column_end":29},"name":"generate_comments","qualname":"<Builder>::generate_comments","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether the generated bindings should contain documentation comments or\n not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15039,"byte_end":15060,"line_start":498,"line_end":498,"column_start":12,"column_end":33},"name":"whitelist_recursively","qualname":"<Builder>::whitelist_recursively","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to whitelist types recursively or not. Defaults to true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15319,"byte_end":15336,"line_start":505,"line_end":505,"column_start":12,"column_end":29},"name":"objc_extern_crate","qualname":"<Builder>::objc_extern_crate","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate `#[macro_use] extern crate objc;` instead of `use objc;`\n in the prologue of the files generated from objective-c files\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15825,"byte_end":15845,"line_start":517,"line_end":517,"column_start":12,"column_end":32},"name":"trust_clang_mangling","qualname":"<Builder>::trust_clang_mangling","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to use the clang-provided name mangling. This is true by default\n and probably needed for C++ features.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16073,"byte_end":16083,"line_start":524,"line_end":524,"column_start":12,"column_end":22},"name":"dummy_uses","qualname":"<Builder>::dummy_uses","value":"fn <T> (mut self, dummy_uses: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Generate a C/C++ file that includes the header and has dummy uses of\n every type defined in the header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16329,"byte_end":16338,"line_start":531,"line_end":531,"column_start":12,"column_end":21},"name":"hide_type","qualname":"<Builder>::hide_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Hide the given type from the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16572,"byte_end":16583,"line_start":538,"line_end":538,"column_start":12,"column_end":23},"name":"opaque_type","qualname":"<Builder>::opaque_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Treat the given type as opaque in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16885,"byte_end":16901,"line_start":546,"line_end":546,"column_start":12,"column_end":28},"name":"whitelisted_type","qualname":"<Builder>::whitelisted_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given type so that it (and all types that it transitively\n refers to) appears in the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2900},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17212,"byte_end":17232,"line_start":554,"line_end":554,"column_start":12,"column_end":32},"name":"whitelisted_function","qualname":"<Builder>::whitelisted_function","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given function so that it (and all types that it\n transitively refers to) appears in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2902},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17547,"byte_end":17562,"line_start":562,"line_end":562,"column_start":12,"column_end":27},"name":"whitelisted_var","qualname":"<Builder>::whitelisted_var","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given variable so that it (and all types that it\n transitively refers to) appears in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2904},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17944,"byte_end":17957,"line_start":572,"line_end":572,"column_start":12,"column_end":25},"name":"bitfield_enum","qualname":"<Builder>::bitfield_enum","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as being\n bitfield-like. Regular expressions are supported.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18296,"byte_end":18311,"line_start":582,"line_end":582,"column_start":12,"column_end":27},"name":"constified_enum","qualname":"<Builder>::constified_enum","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as a set of\n constants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2908},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18706,"byte_end":18728,"line_start":592,"line_end":592,"column_start":12,"column_end":34},"name":"constified_enum_module","qualname":"<Builder>::constified_enum_module","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as a set of\n constants that should be put into a module.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2910},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18986,"byte_end":18994,"line_start":599,"line_end":599,"column_start":12,"column_end":20},"name":"raw_line","qualname":"<Builder>::raw_line","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add a string to prepend to the generated bindings. The string is passed\n through without any modification.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19187,"byte_end":19196,"line_start":605,"line_end":605,"column_start":12,"column_end":21},"name":"clang_arg","qualname":"<Builder>::clang_arg","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add an argument to be passed straight through to clang.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19388,"byte_end":19398,"line_start":611,"line_end":611,"column_start":12,"column_end":22},"name":"clang_args","qualname":"<Builder>::clang_args","value":"fn <I> (mut self, iter: I) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add arguments to be passed straight through to clang.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19681,"byte_end":19685,"line_start":621,"line_end":621,"column_start":12,"column_end":16},"name":"link","qualname":"<Builder>::link","value":"fn <T> (mut self, library: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Make the generated bindings link the given shared library.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2918},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19906,"byte_end":19917,"line_start":627,"line_end":627,"column_start":12,"column_end":23},"name":"link_static","qualname":"<Builder>::link_static","value":"fn <T> (mut self, library: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Make the generated bindings link the given static library.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2920},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20132,"byte_end":20146,"line_start":633,"line_end":633,"column_start":12,"column_end":26},"name":"link_framework","qualname":"<Builder>::link_framework","value":"fn <T> (mut self, library: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Make the generated bindings link the given framework.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20413,"byte_end":20426,"line_start":640,"line_end":640,"column_start":12,"column_end":25},"name":"emit_builtins","qualname":"<Builder>::emit_builtins","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit bindings for builtin definitions (for example `__builtin_va_list`)\n in the generated Rust.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2924},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20578,"byte_end":20595,"line_start":646,"line_end":646,"column_start":12,"column_end":29},"name":"no_convert_floats","qualname":"<Builder>::no_convert_floats","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Avoid converting floats to `f32`/`f64` by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2926},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20746,"byte_end":20758,"line_start":652,"line_end":652,"column_start":12,"column_end":24},"name":"layout_tests","qualname":"<Builder>::layout_tests","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether layout tests should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2928},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20922,"byte_end":20934,"line_start":658,"line_end":658,"column_start":12,"column_end":24},"name":"derive_debug","qualname":"<Builder>::derive_debug","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Debug` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2930},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21100,"byte_end":21114,"line_start":664,"line_end":664,"column_start":12,"column_end":26},"name":"derive_default","qualname":"<Builder>::derive_default","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Default` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2932},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21246,"byte_end":21260,"line_start":670,"line_end":670,"column_start":12,"column_end":26},"name":"emit_clang_ast","qualname":"<Builder>::emit_clang_ast","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit Clang AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2934},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21370,"byte_end":21377,"line_start":676,"line_end":676,"column_start":12,"column_end":19},"name":"emit_ir","qualname":"<Builder>::emit_ir","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit IR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2936},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21500,"byte_end":21521,"line_start":682,"line_end":682,"column_start":12,"column_end":33},"name":"enable_cxx_namespaces","qualname":"<Builder>::enable_cxx_namespaces","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Enable C++ namespaces.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2938},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22125,"byte_end":22149,"line_start":700,"line_end":700,"column_start":12,"column_end":36},"name":"disable_name_namespacing","qualname":"<Builder>::disable_name_namespacing","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Disable name auto-namespacing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2940},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23422,"byte_end":23452,"line_start":733,"line_end":733,"column_start":12,"column_end":42},"name":"conservative_inline_namespaces","qualname":"<Builder>::conservative_inline_namespaces","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Treat inline namespaces conservatively.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2942},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23842,"byte_end":23867,"line_start":743,"line_end":743,"column_start":12,"column_end":37},"name":"generate_inline_functions","qualname":"<Builder>::generate_inline_functions","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether inline functions should be generated or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2944},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24012,"byte_end":24028,"line_start":749,"line_end":749,"column_start":12,"column_end":28},"name":"ignore_functions","qualname":"<Builder>::ignore_functions","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Ignore functions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24162,"byte_end":24176,"line_start":755,"line_end":755,"column_start":12,"column_end":26},"name":"ignore_methods","qualname":"<Builder>::ignore_methods","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Ignore methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24376,"byte_end":24389,"line_start":761,"line_end":761,"column_start":12,"column_end":25},"name":"unstable_rust","qualname":"<Builder>::unstable_rust","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Avoid generating any unstable Rust, such as Rust unions, in the generated bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2950},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24558,"byte_end":24566,"line_start":767,"line_end":767,"column_start":12,"column_end":20},"name":"use_core","qualname":"<Builder>::use_core","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Use core instead of libstd in the generated bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24735,"byte_end":24748,"line_start":773,"line_end":773,"column_start":12,"column_end":25},"name":"ctypes_prefix","qualname":"<Builder>::ctypes_prefix","value":"fn <T> (mut self, prefix: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Use the given prefix for the raw types instead of `::std::os::raw`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25036,"byte_end":25051,"line_start":780,"line_end":780,"column_start":12,"column_end":27},"name":"parse_callbacks","qualname":"<Builder>::parse_callbacks","value":"fn (mut self, cb: Box<callbacks::ParseCallbacks>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows configuring types in different situations, see the\n [`ParseCallbacks`](./callbacks/trait.ParseCallbacks.html) documentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2956},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25284,"byte_end":25303,"line_start":787,"line_end":787,"column_start":12,"column_end":31},"name":"with_codegen_config","qualname":"<Builder>::with_codegen_config","value":"fn (mut self, config: CodegenConfig) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose what to generate using a\n [`CodegenConfig`](./struct.CodegenConfig.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25488,"byte_end":25505,"line_start":793,"line_end":793,"column_start":12,"column_end":29},"name":"prepend_enum_name","qualname":"<Builder>::prepend_enum_name","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Prepend the enum name to constant or bitfield variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25688,"byte_end":25696,"line_start":799,"line_end":799,"column_start":12,"column_end":20},"name":"generate","qualname":"<Builder>::generate","value":"fn <'ctx> (mut self) -> Result<Bindings<'ctx>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Generate the Rust bindings using the options built up thus far.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26599,"byte_end":26622,"line_start":824,"line_end":824,"column_start":12,"column_end":35},"name":"dump_preprocessed_input","qualname":"<Builder>::dump_preprocessed_input","value":"fn (&self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Preprocess and dump the input header files to disk.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5106},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29206,"byte_end":29220,"line_start":907,"line_end":907,"column_start":12,"column_end":26},"name":"BindgenOptions","qualname":"::BindgenOptions","value":"BindgenOptions { hidden_types, opaque_types, whitelisted_types, whitelisted_functions, whitelisted_vars, bitfield_enums, constified_enums, constified_enum_modules, builtins, links, emit_ast, emit_ir, emit_ir_graphviz, enable_cxx_namespaces, disable_name_namespacing, layout_tests, derive_debug, derive_default, unstable_rust, use_core, ctypes_prefix, namespaced_constants, msvc_mangling, convert_floats, raw_lines, clang_args, input_header, input_unsaved_files, dummy_uses, parse_callbacks, codegen_config, conservative_inline_namespaces, generate_comments, generate_inline_functions, whitelist_recursively, objc_extern_crate, enable_mangling, prepend_enum_name }","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973},{"krate":0,"index":1975},{"krate":0,"index":1977}],"decl_id":null,"docs":" Configuration options for generated bindings.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29181,"byte_end":29194,"line_start":906,"line_end":906,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":1903},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29345,"byte_end":29357,"line_start":910,"line_end":910,"column_start":9,"column_end":21},"name":"hidden_types","qualname":"::BindgenOptions::hidden_types","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of types that have been blacklisted and should not appear\n anywhere in the generated code.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1905},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29478,"byte_end":29490,"line_start":914,"line_end":914,"column_start":9,"column_end":21},"name":"opaque_types","qualname":"::BindgenOptions::opaque_types","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of types that should be treated as opaque structures in the\n generated code.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1907},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29841,"byte_end":29858,"line_start":922,"line_end":922,"column_start":9,"column_end":26},"name":"whitelisted_types","qualname":"::BindgenOptions::whitelisted_types","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of types that we should have bindings for in the generated\n code.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1909},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29953,"byte_end":29974,"line_start":925,"line_end":925,"column_start":9,"column_end":30},"name":"whitelisted_functions","qualname":"::BindgenOptions::whitelisted_functions","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whitelisted functions. See docs for `whitelisted_types` for more.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30069,"byte_end":30085,"line_start":928,"line_end":928,"column_start":9,"column_end":25},"name":"whitelisted_vars","qualname":"::BindgenOptions::whitelisted_vars","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whitelisted variables. See docs for `whitelisted_types` for more.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1913},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30161,"byte_end":30175,"line_start":931,"line_end":931,"column_start":9,"column_end":23},"name":"bitfield_enums","qualname":"::BindgenOptions::bitfield_enums","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The enum patterns to mark an enum as bitfield.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30251,"byte_end":30267,"line_start":934,"line_end":934,"column_start":9,"column_end":25},"name":"constified_enums","qualname":"::BindgenOptions::constified_enums","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The enum patterns to mark an enum as constant.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30356,"byte_end":30379,"line_start":937,"line_end":937,"column_start":9,"column_end":32},"name":"constified_enum_modules","qualname":"::BindgenOptions::constified_enum_modules","value":"regex_set::RegexSet","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The enum patterns to mark an enum as a module of constants.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30452,"byte_end":30460,"line_start":940,"line_end":940,"column_start":9,"column_end":17},"name":"builtins","qualname":"::BindgenOptions::builtins","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether we should generate builtins or not.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30549,"byte_end":30554,"line_start":943,"line_end":943,"column_start":9,"column_end":14},"name":"links","qualname":"::BindgenOptions::links","value":"std::vec::Vec<(std::string::String, LinkType)>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of libraries we should link in the generated Rust code.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30659,"byte_end":30667,"line_start":946,"line_end":946,"column_start":9,"column_end":17},"name":"emit_ast","qualname":"::BindgenOptions::emit_ast","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should dump the Clang AST for debugging purposes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30755,"byte_end":30762,"line_start":949,"line_end":949,"column_start":9,"column_end":16},"name":"emit_ir","qualname":"::BindgenOptions::emit_ir","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should dump our internal IR for debugging purposes.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30813,"byte_end":30829,"line_start":952,"line_end":952,"column_start":9,"column_end":25},"name":"emit_ir_graphviz","qualname":"::BindgenOptions::emit_ir_graphviz","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Output graphviz dot file.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30958,"byte_end":30979,"line_start":956,"line_end":956,"column_start":9,"column_end":30},"name":"enable_cxx_namespaces","qualname":"::BindgenOptions::enable_cxx_namespaces","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should emulate C++ namespaces with Rust modules in the\n generated bindings.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1931},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31060,"byte_end":31084,"line_start":959,"line_end":959,"column_start":9,"column_end":33},"name":"disable_name_namespacing","qualname":"::BindgenOptions::disable_name_namespacing","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should avoid mangling names with namespaces.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31175,"byte_end":31187,"line_start":962,"line_end":962,"column_start":9,"column_end":21},"name":"layout_tests","qualname":"::BindgenOptions::layout_tests","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should generate layout tests for generated structures.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31305,"byte_end":31317,"line_start":966,"line_end":966,"column_start":9,"column_end":21},"name":"derive_debug","qualname":"::BindgenOptions::derive_debug","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should derive Debug trait implementations for C/C++ structures\n and types.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1937},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31437,"byte_end":31451,"line_start":970,"line_end":970,"column_start":9,"column_end":23},"name":"derive_default","qualname":"::BindgenOptions::derive_default","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should derive Default trait implementations for C/C++ structures\n and types.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1939},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31559,"byte_end":31572,"line_start":974,"line_end":974,"column_start":9,"column_end":22},"name":"unstable_rust","qualname":"::BindgenOptions::unstable_rust","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we can use unstable Rust code in the bindings, false if we\n cannot.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1941},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31658,"byte_end":31666,"line_start":977,"line_end":977,"column_start":9,"column_end":17},"name":"use_core","qualname":"::BindgenOptions::use_core","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should avoid using libstd to use libcore instead.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31757,"byte_end":31770,"line_start":980,"line_end":980,"column_start":9,"column_end":22},"name":"ctypes_prefix","qualname":"::BindgenOptions::ctypes_prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" An optional prefix for the \"raw\" types, like `c_int`, `c_void`...\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31895,"byte_end":31915,"line_start":984,"line_end":984,"column_start":9,"column_end":29},"name":"namespaced_constants","qualname":"::BindgenOptions::namespaced_constants","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should generate constant names that are **directly** under\n namespaces.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31988,"byte_end":32001,"line_start":987,"line_end":987,"column_start":9,"column_end":22},"name":"msvc_mangling","qualname":"::BindgenOptions::msvc_mangling","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" True if we should use MSVC name mangling rules.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32082,"byte_end":32096,"line_start":990,"line_end":990,"column_start":9,"column_end":23},"name":"convert_floats","qualname":"::BindgenOptions::convert_floats","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether we should convert float types to f32/f64 types.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32181,"byte_end":32190,"line_start":993,"line_end":993,"column_start":9,"column_end":18},"name":"raw_lines","qualname":"::BindgenOptions::raw_lines","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of raw lines to prepend to the generated Rust code.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1953},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32278,"byte_end":32288,"line_start":996,"line_end":996,"column_start":9,"column_end":19},"name":"clang_args","qualname":"::BindgenOptions::clang_args","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The set of arguments to pass straight through to Clang.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32343,"byte_end":32355,"line_start":999,"line_end":999,"column_start":9,"column_end":21},"name":"input_header","qualname":"::BindgenOptions::input_header","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The input header file.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32415,"byte_end":32434,"line_start":1002,"line_end":1002,"column_start":9,"column_end":28},"name":"input_unsaved_files","qualname":"::BindgenOptions::input_unsaved_files","value":"std::vec::Vec<clang::UnsavedFile>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Unsaved files for input.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32620,"byte_end":32630,"line_start":1006,"line_end":1006,"column_start":9,"column_end":19},"name":"dummy_uses","qualname":"::BindgenOptions::dummy_uses","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Generate a dummy C/C++ file that includes the header and has dummy uses\n of all types defined therein. See the `uses` module for more.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1961},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32749,"byte_end":32764,"line_start":1010,"line_end":1010,"column_start":9,"column_end":24},"name":"parse_callbacks","qualname":"::BindgenOptions::parse_callbacks","value":"std::option::Option<std::boxed::Box<(dyn callbacks::ParseCallbacks + 'static)>>","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" A user-provided visitor to allow customizing different kinds of\n situations.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1963},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32911,"byte_end":32925,"line_start":1014,"line_end":1014,"column_start":9,"column_end":23},"name":"codegen_config","qualname":"::BindgenOptions::codegen_config","value":"CodegenConfig","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Which kind of items should we generate? By default, we'll generate all\n of them.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1965},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33079,"byte_end":33109,"line_start":1019,"line_end":1019,"column_start":9,"column_end":39},"name":"conservative_inline_namespaces","qualname":"::BindgenOptions::conservative_inline_namespaces","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether to treat inline namespaces conservatively.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33245,"byte_end":33262,"line_start":1023,"line_end":1023,"column_start":9,"column_end":26},"name":"generate_comments","qualname":"::BindgenOptions::generate_comments","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Wether to keep documentation comments in the generated output. See the\n documentation for more details.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1969},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33344,"byte_end":33369,"line_start":1026,"line_end":1026,"column_start":9,"column_end":34},"name":"generate_inline_functions","qualname":"::BindgenOptions::generate_inline_functions","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether to generate inline functions. Defaults to false.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1971},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33451,"byte_end":33472,"line_start":1029,"line_end":1029,"column_start":9,"column_end":30},"name":"whitelist_recursively","qualname":"::BindgenOptions::whitelist_recursively","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Wether to whitelist types recursively. Defaults to true.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1973},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33622,"byte_end":33639,"line_start":1033,"line_end":1033,"column_start":9,"column_end":26},"name":"objc_extern_crate","qualname":"::BindgenOptions::objc_extern_crate","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Intead of emitting 'use objc;' to files generated from objective c files,\n generate '#[macro_use] extern crate objc;'\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1975},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34023,"byte_end":34038,"line_start":1042,"line_end":1042,"column_start":9,"column_end":24},"name":"enable_mangling","qualname":"::BindgenOptions::enable_mangling","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether to use the clang-provided name mangling. This is true and\n probably needed for C++ features.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1977},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34130,"byte_end":34147,"line_start":1045,"line_end":1045,"column_start":9,"column_end":26},"name":"prepend_enum_name","qualname":"::BindgenOptions::prepend_enum_name","value":"bool","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether to prepend the enum name to bitfield or constant variants.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1979},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36612,"byte_end":36619,"line_start":1117,"line_end":1117,"column_start":5,"column_end":12},"name":"Default","qualname":"::LinkType::Default","value":"LinkType::Default","parent":{"krate":0,"index":5112},"children":[],"decl_id":null,"docs":" Use shared library linking. This is the default.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36653,"byte_end":36659,"line_start":1119,"line_end":1119,"column_start":5,"column_end":11},"name":"Static","qualname":"::LinkType::Static","value":"LinkType::Static","parent":{"krate":0,"index":5112},"children":[],"decl_id":null,"docs":" Use static linking.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36706,"byte_end":36715,"line_start":1121,"line_end":1121,"column_start":5,"column_end":14},"name":"Framework","qualname":"::LinkType::Framework","value":"LinkType::Framework","parent":{"krate":0,"index":5112},"children":[],"decl_id":null,"docs":" The library is an OSX framework.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5112},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36540,"byte_end":36548,"line_start":1115,"line_end":1115,"column_start":10,"column_end":18},"name":"LinkType","qualname":"::LinkType","value":"LinkType::{Default, Static, Framework}","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1983}],"decl_id":null,"docs":" The linking type to use with a given library.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36531,"byte_end":36718,"line_start":1115,"line_end":1122,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36531,"byte_end":36718,"line_start":1115,"line_end":1122,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5160},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37406,"byte_end":37414,"line_start":1147,"line_end":1147,"column_start":12,"column_end":20},"name":"Bindings","qualname":"::Bindings","value":"Bindings {  }","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1991}],"decl_id":null,"docs":" Generated Rust bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37642,"byte_end":37650,"line_start":1157,"line_end":1157,"column_start":12,"column_end":20},"name":"generate","qualname":"<Bindings<'ctx>>::generate","value":"fn (mut options: BindgenOptions, span: Option<Span>) -> Result<Bindings<'ctx>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Generate bindings for the given options.","sig":null,"attributes":[{"value":"deprecated","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37617,"byte_end":37630,"line_start":1156,"line_end":1156,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40512,"byte_end":40520,"line_start":1237,"line_end":1237,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Bindings<'ctx>>::into_ast","value":"fn (self) -> Vec<P<ast::Item>>","parent":null,"children":[],"decl_id":null,"docs":" Convert these bindings into a Rust AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2982},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40670,"byte_end":40679,"line_start":1242,"line_end":1242,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Bindings<'ctx>>::to_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Convert these bindings into source text (with raw lines prepended).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41022,"byte_end":41035,"line_start":1252,"line_end":1252,"column_start":12,"column_end":25},"name":"write_to_file","qualname":"<Bindings<'ctx>>::write_to_file","value":"fn <P> (&self, path: P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write these bindings as source text to a file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2986},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41359,"byte_end":41364,"line_start":1262,"line_end":1262,"column_start":12,"column_end":17},"name":"write","qualname":"<Bindings<'ctx>>::write","value":"fn <'a> (&self, mut writer: Box<Write + 'a>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write these bindings as source text to the given `Write`able.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42218,"byte_end":42234,"line_start":1285,"line_end":1285,"column_start":12,"column_end":28},"name":"write_dummy_uses","qualname":"<Bindings<'ctx>>::write_dummy_uses","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Generate and write dummy uses of all the types we parsed, if we've been\n requested to do so in the options.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2992},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42988,"byte_end":42997,"line_start":1312,"line_end":1312,"column_start":8,"column_end":17},"name":"parse_one","qualname":"::parse_one","value":"fn (ctx: &mut BindgenContext, cursor: clang::Cursor, parent: Option<ItemId>) -> clang_sys::CXChildVisitResult","parent":null,"children":[],"decl_id":null,"docs":" Parse one `Item` from the Clang cursor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5166},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44709,"byte_end":44721,"line_start":1373,"line_end":1373,"column_start":12,"column_end":24},"name":"ClangVersion","qualname":"::ClangVersion","value":"ClangVersion { parsed, full }","parent":null,"children":[{"krate":0,"index":1995},{"krate":0,"index":1997}],"decl_id":null,"docs":" Extracted Clang version data\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1995},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44790,"byte_end":44796,"line_start":1375,"line_end":1375,"column_start":9,"column_end":15},"name":"parsed","qualname":"::ClangVersion::parsed","value":"std::option::Option<(u32, u32)>","parent":{"krate":0,"index":5166},"children":[],"decl_id":null,"docs":" Major and minor semvar, if parsing was successful\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1997},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44854,"byte_end":44858,"line_start":1377,"line_end":1377,"column_start":9,"column_end":13},"name":"full","qualname":"::ClangVersion::full","value":"std::string::String","parent":{"krate":0,"index":5166},"children":[],"decl_id":null,"docs":" full version string\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3002},"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44944,"byte_end":44957,"line_start":1381,"line_end":1381,"column_start":8,"column_end":21},"name":"clang_version","qualname":"::clang_version","value":"fn () -> ClangVersion","parent":null,"children":[],"decl_id":null,"docs":" Get the major and the minor semvar numbers of Clang's version\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":48766,"byte_end":48772,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49060,"byte_end":49066,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69164,"byte_end":69170,"line_start":652,"line_end":652,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69297,"byte_end":69303,"line_start":658,"line_end":658,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69322,"byte_end":69328,"line_start":660,"line_end":660,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69560,"byte_end":69564,"line_start":672,"line_end":672,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69687,"byte_end":69691,"line_start":678,"line_end":678,"column_start":13,"column_end":17},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69716,"byte_end":69720,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70693,"byte_end":70704,"line_start":710,"line_end":710,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71138,"byte_end":71142,"line_start":725,"line_end":725,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80200,"byte_end":80224,"line_start":1001,"line_end":1001,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80575,"byte_end":80598,"line_start":1020,"line_end":1020,"column_start":19,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80975,"byte_end":80998,"line_start":1035,"line_end":1035,"column_start":28,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81287,"byte_end":81301,"line_start":1048,"line_end":1048,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82027,"byte_end":82041,"line_start":1072,"line_end":1072,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82479,"byte_end":82486,"line_start":1090,"line_end":1090,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83593,"byte_end":83616,"line_start":1128,"line_end":1128,"column_start":19,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84311,"byte_end":84336,"line_start":1158,"line_end":1158,"column_start":19,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85015,"byte_end":85019,"line_start":1185,"line_end":1185,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85806,"byte_end":85811,"line_start":1215,"line_end":1215,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86301,"byte_end":86306,"line_start":1231,"line_end":1231,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86428,"byte_end":86433,"line_start":1237,"line_end":1237,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86867,"byte_end":86882,"line_start":1259,"line_end":1259,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87005,"byte_end":87020,"line_start":1265,"line_end":1265,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91540,"byte_end":91555,"line_start":1392,"line_end":1392,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91792,"byte_end":91802,"line_start":1406,"line_end":1406,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92293,"byte_end":92303,"line_start":1422,"line_end":1422,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92710,"byte_end":92721,"line_start":1440,"line_end":1440,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93277,"byte_end":93288,"line_start":1458,"line_end":1458,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100845,"byte_end":100855,"line_start":1685,"line_end":1685,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103209,"byte_end":103219,"line_start":1756,"line_end":1756,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106121,"byte_end":106132,"line_start":72,"line_end":72,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106437,"byte_end":106448,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":128933,"byte_end":128955,"line_start":166,"line_end":166,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":136638,"byte_end":136660,"line_start":344,"line_end":344,"column_start":40,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":144702,"byte_end":144709,"line_start":543,"line_end":543,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":147240,"byte_end":147257,"line_start":55,"line_end":55,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":148556,"byte_end":148573,"line_start":94,"line_end":94,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":157266,"byte_end":157273,"line_start":318,"line_end":318,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":158933,"byte_end":158950,"line_start":39,"line_end":39,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":159734,"byte_end":159751,"line_start":63,"line_end":63,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":162376,"byte_end":162383,"line_start":147,"line_end":147,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164516,"byte_end":164522,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":166730,"byte_end":166742,"line_start":143,"line_end":143,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167461,"byte_end":167466,"line_start":172,"line_end":172,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":168131,"byte_end":168136,"line_start":192,"line_end":192,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":168648,"byte_end":168653,"line_start":211,"line_end":211,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":169794,"byte_end":169803,"line_start":243,"line_end":243,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":170116,"byte_end":170124,"line_start":254,"line_end":254,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":830}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":170741,"byte_end":170749,"line_start":277,"line_end":277,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":844},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171960,"byte_end":171968,"line_start":322,"line_end":322,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":172781,"byte_end":172789,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":173377,"byte_end":173385,"line_start":382,"line_end":382,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":181262,"byte_end":181272,"line_start":596,"line_end":596,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":181379,"byte_end":181389,"line_start":602,"line_end":602,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":182337,"byte_end":182347,"line_start":629,"line_end":629,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":183572,"byte_end":183581,"line_start":675,"line_end":675,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":184124,"byte_end":184129,"line_start":705,"line_end":705,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":184540,"byte_end":184545,"line_start":718,"line_end":718,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185828,"byte_end":185832,"line_start":767,"line_end":767,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":940}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":188932,"byte_end":188940,"line_start":861,"line_end":861,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":976},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":208696,"byte_end":208704,"line_start":1363,"line_end":1363,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":209990,"byte_end":209998,"line_start":1405,"line_end":1405,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":210164,"byte_end":210172,"line_start":1413,"line_end":1413,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":210493,"byte_end":210501,"line_start":1425,"line_end":1425,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":212043,"byte_end":212051,"line_start":1472,"line_end":1472,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":213723,"byte_end":213731,"line_start":1519,"line_end":1519,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220006,"byte_end":220012,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220150,"byte_end":220156,"line_start":42,"line_end":42,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220346,"byte_end":220352,"line_start":48,"line_end":48,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220549,"byte_end":220555,"line_start":56,"line_end":56,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":221434,"byte_end":221444,"line_start":84,"line_end":84,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":225880,"byte_end":225905,"line_start":205,"line_end":205,"column_start":31,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1190},{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":226285,"byte_end":226310,"line_start":221,"line_end":221,"column_start":18,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":226784,"byte_end":226798,"line_start":238,"line_end":238,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1282},{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1302},{"krate":0,"index":1304},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322},{"krate":0,"index":1326},{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289349,"byte_end":289355,"line_start":1783,"line_end":1783,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289510,"byte_end":289522,"line_start":1790,"line_end":1790,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289611,"byte_end":289623,"line_start":1796,"line_end":1796,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291266,"byte_end":291277,"line_start":1849,"line_end":1849,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291844,"byte_end":291855,"line_start":1871,"line_end":1871,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300060,"byte_end":300064,"line_start":36,"line_end":36,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304666,"byte_end":304677,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306497,"byte_end":306509,"line_start":25,"line_end":25,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":307890,"byte_end":307898,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308785,"byte_end":308793,"line_start":105,"line_end":105,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1572}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309541,"byte_end":309544,"line_start":132,"line_end":132,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":313210,"byte_end":313221,"line_start":245,"line_end":245,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318882,"byte_end":318890,"line_start":395,"line_end":395,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":321088,"byte_end":321099,"line_start":461,"line_end":461,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":321755,"byte_end":321766,"line_start":482,"line_end":482,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323656,"byte_end":323663,"line_start":85,"line_end":85,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1628},{"krate":0,"index":1632},{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":327994,"byte_end":328010,"line_start":93,"line_end":93,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3690},{"krate":0,"index":3692},{"krate":0,"index":3694}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":328451,"byte_end":328468,"line_start":116,"line_end":116,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1754}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":328723,"byte_end":328740,"line_start":128,"line_end":128,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329189,"byte_end":329195,"line_start":149,"line_end":149,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1764},{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329396,"byte_end":329400,"line_start":157,"line_end":157,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1772}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329588,"byte_end":329596,"line_start":165,"line_end":165,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1778}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329980,"byte_end":329986,"line_start":179,"line_end":179,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":330249,"byte_end":330255,"line_start":187,"line_end":187,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":330863,"byte_end":330869,"line_start":203,"line_end":203,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331089,"byte_end":331093,"line_start":211,"line_end":211,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331295,"byte_end":331301,"line_start":219,"line_end":219,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1800},{"krate":0,"index":1802}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331513,"byte_end":331517,"line_start":229,"line_end":229,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":333384,"byte_end":333388,"line_start":273,"line_end":273,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":333582,"byte_end":333586,"line_start":279,"line_end":279,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":334169,"byte_end":334173,"line_start":299,"line_end":299,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":337677,"byte_end":337681,"line_start":402,"line_end":402,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":337749,"byte_end":337753,"line_start":408,"line_end":408,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1834},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356245,"byte_end":356251,"line_start":927,"line_end":927,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356528,"byte_end":356532,"line_start":937,"line_end":937,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1910}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356927,"byte_end":356933,"line_start":949,"line_end":949,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357065,"byte_end":357069,"line_start":955,"line_end":955,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1918}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357269,"byte_end":357273,"line_start":964,"line_end":964,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1924}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357878,"byte_end":357884,"line_start":985,"line_end":985,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":358164,"byte_end":358168,"line_start":994,"line_end":994,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":358390,"byte_end":358398,"line_start":1002,"line_end":1002,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":359746,"byte_end":359750,"line_start":1043,"line_end":1043,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1944},{"krate":0,"index":1946},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1962},{"krate":0,"index":1964},{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":379670,"byte_end":379674,"line_start":1555,"line_end":1555,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":380386,"byte_end":380390,"line_start":1573,"line_end":1573,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":382578,"byte_end":382589,"line_start":1640,"line_end":1640,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1986},{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383918,"byte_end":383926,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2024},{"krate":0,"index":2026},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2032},{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386866,"byte_end":386874,"line_start":129,"line_end":129,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388410,"byte_end":388416,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2070},{"krate":0,"index":2072},{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389595,"byte_end":389601,"line_start":74,"line_end":74,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390627,"byte_end":390633,"line_start":105,"line_end":105,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2090},{"krate":0,"index":2092}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390875,"byte_end":390881,"line_start":114,"line_end":114,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":391112,"byte_end":391118,"line_start":123,"line_end":123,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392251,"byte_end":392257,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":393005,"byte_end":393011,"line_start":62,"line_end":62,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":393324,"byte_end":393330,"line_start":73,"line_end":73,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":401646,"byte_end":401667,"line_start":204,"line_end":204,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":405305,"byte_end":405326,"line_start":302,"line_end":302,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":406511,"byte_end":406532,"line_start":336,"line_end":336,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2230}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":406987,"byte_end":407008,"line_start":350,"line_end":350,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2236}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":407864,"byte_end":407868,"line_start":20,"line_end":20,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":408104,"byte_end":408108,"line_start":30,"line_end":30,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2260}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":414799,"byte_end":414806,"line_start":254,"line_end":254,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2286}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":415397,"byte_end":415402,"line_start":272,"line_end":272,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2290},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":416895,"byte_end":416898,"line_start":320,"line_end":320,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2302},{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":417075,"byte_end":417083,"line_start":330,"line_end":330,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2308},{"krate":0,"index":2310}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":417662,"byte_end":417663,"line_start":351,"line_end":351,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2320}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":419332,"byte_end":419345,"line_start":401,"line_end":401,"column_start":45,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2332}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":420501,"byte_end":420514,"line_start":437,"line_end":437,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":421136,"byte_end":421149,"line_start":458,"line_end":458,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2340},{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":424253,"byte_end":424257,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2422},{"krate":0,"index":2424},{"krate":0,"index":2426},{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2438},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2444},{"krate":0,"index":2446},{"krate":0,"index":2448},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2458},{"krate":0,"index":2460},{"krate":0,"index":2462},{"krate":0,"index":2466},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433301,"byte_end":433305,"line_start":341,"line_end":341,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2480},{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433752,"byte_end":433756,"line_start":355,"line_end":355,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2486},{"krate":0,"index":2488}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433951,"byte_end":433959,"line_start":363,"line_end":363,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2492},{"krate":0,"index":2494}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":434285,"byte_end":434289,"line_start":375,"line_end":375,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":435091,"byte_end":435099,"line_start":401,"line_end":401,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2502}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":438063,"byte_end":438067,"line_start":487,"line_end":487,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2506}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":438289,"byte_end":438297,"line_start":495,"line_end":495,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":439454,"byte_end":439458,"line_start":529,"line_end":529,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":440839,"byte_end":440843,"line_start":569,"line_end":569,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442480,"byte_end":442489,"line_start":623,"line_end":623,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2528}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445317,"byte_end":445321,"line_start":722,"line_end":722,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2532},{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":472070,"byte_end":472074,"line_start":1241,"line_end":1241,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2540},{"krate":0,"index":2542}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475129,"byte_end":475132,"line_start":45,"line_end":45,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":476148,"byte_end":476151,"line_start":89,"line_end":89,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2600}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":476717,"byte_end":476720,"line_start":110,"line_end":110,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2604}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":487372,"byte_end":487385,"line_start":54,"line_end":54,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2682}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":491709,"byte_end":491719,"line_start":172,"line_end":172,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":493470,"byte_end":493483,"line_start":236,"line_end":236,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2700},{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":497914,"byte_end":497922,"line_start":15,"line_end":15,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":499461,"byte_end":499469,"line_start":71,"line_end":71,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11503124,"byte_end":11503129,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4032}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11503307,"byte_end":11503312,"line_start":685,"line_end":685,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4036},{"krate":0,"index":4038}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11505387,"byte_end":11505400,"line_start":737,"line_end":737,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4076},{"krate":0,"index":4078}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11530050,"byte_end":11530069,"line_start":1040,"line_end":1040,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4164},{"krate":0,"index":4166},{"krate":0,"index":4168},{"krate":0,"index":4170},{"krate":0,"index":4172},{"krate":0,"index":4174},{"krate":0,"index":4176},{"krate":0,"index":4178},{"krate":0,"index":4180},{"krate":0,"index":4182},{"krate":0,"index":4184}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11546109,"byte_end":11546122,"line_start":1344,"line_end":1344,"column_start":11,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4346},{"krate":0,"index":4348},{"krate":0,"index":4350},{"krate":0,"index":4352},{"krate":0,"index":4354},{"krate":0,"index":4356},{"krate":0,"index":4358},{"krate":0,"index":4360},{"krate":0,"index":4362},{"krate":0,"index":4364},{"krate":0,"index":4366},{"krate":0,"index":4368}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548103,"byte_end":11548116,"line_start":1389,"line_end":1389,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4372},{"krate":0,"index":4374}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548255,"byte_end":11548268,"line_start":1396,"line_end":1396,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4378}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548408,"byte_end":11548425,"line_start":1402,"line_end":1402,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4384},{"krate":0,"index":4386},{"krate":0,"index":4388},{"krate":0,"index":4390}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11549505,"byte_end":11549506,"line_start":1434,"line_end":1434,"column_start":16,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4398}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11550304,"byte_end":11550308,"line_start":1454,"line_end":1454,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4408},{"krate":0,"index":4410}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11551426,"byte_end":11551432,"line_start":1484,"line_end":1484,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4414},{"krate":0,"index":4416}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11554253,"byte_end":11554256,"line_start":1548,"line_end":1548,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4420},{"krate":0,"index":4422}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11564761,"byte_end":11564765,"line_start":1668,"line_end":1668,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4436},{"krate":0,"index":4438}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11570819,"byte_end":11570825,"line_start":1793,"line_end":1793,"column_start":11,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4444}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11571070,"byte_end":11571076,"line_start":1801,"line_end":1801,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4448},{"krate":0,"index":4450}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11571833,"byte_end":11571839,"line_start":1817,"line_end":1817,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4454}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11572039,"byte_end":11572045,"line_start":1823,"line_end":1823,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4458},{"krate":0,"index":4460}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11572280,"byte_end":11572301,"line_start":1833,"line_end":1833,"column_start":24,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4464},{"krate":0,"index":4466}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11602706,"byte_end":11602720,"line_start":2061,"line_end":2061,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4484}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11602800,"byte_end":11602814,"line_start":2064,"line_end":2064,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4488},{"krate":0,"index":4490}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11603628,"byte_end":11603633,"line_start":2089,"line_end":2089,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4500},{"krate":0,"index":4502}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11604772,"byte_end":11604781,"line_start":2116,"line_end":2116,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4506},{"krate":0,"index":4508}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11666196,"byte_end":11666208,"line_start":2579,"line_end":2579,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4540},{"krate":0,"index":4542}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11675881,"byte_end":11675889,"line_start":2681,"line_end":2681,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4558}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11693820,"byte_end":11693832,"line_start":2853,"line_end":2853,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4574},{"krate":0,"index":4576}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11704775,"byte_end":11704783,"line_start":3011,"line_end":3011,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4602},{"krate":0,"index":4604}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11800944,"byte_end":11800952,"line_start":3635,"line_end":3635,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4612},{"krate":0,"index":4614}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11914876,"byte_end":11914882,"line_start":4499,"line_end":4499,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4658}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11934757,"byte_end":11934768,"line_start":4745,"line_end":4745,"column_start":11,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":4684},{"krate":0,"index":4686},{"krate":0,"index":4688}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12004548,"byte_end":12004552,"line_start":5258,"line_end":5258,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4708},{"krate":0,"index":4710}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12014949,"byte_end":12014950,"line_start":5480,"line_end":5480,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12016105,"byte_end":12016106,"line_start":5506,"line_end":5506,"column_start":37,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4744},{"krate":0,"index":4746}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018317,"byte_end":12018318,"line_start":5552,"line_end":5552,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4756},{"krate":0,"index":4758}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018764,"byte_end":12018770,"line_start":5566,"line_end":5566,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4762},{"krate":0,"index":4764}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018983,"byte_end":12018989,"line_start":5576,"line_end":5576,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4768},{"krate":0,"index":4770}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019206,"byte_end":12019210,"line_start":5586,"line_end":5586,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4774},{"krate":0,"index":4776}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019426,"byte_end":12019430,"line_start":5596,"line_end":5596,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4780},{"krate":0,"index":4782}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019650,"byte_end":12019654,"line_start":5606,"line_end":5606,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4786},{"krate":0,"index":4788}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019882,"byte_end":12019886,"line_start":5616,"line_end":5616,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4792},{"krate":0,"index":4794}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12044676,"byte_end":12044697,"line_start":5898,"line_end":5898,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4828},{"krate":0,"index":4830}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12044942,"byte_end":12044963,"line_start":5908,"line_end":5908,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4834},{"krate":0,"index":4836}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12047652,"byte_end":12047663,"line_start":5954,"line_end":5954,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4840},{"krate":0,"index":4842}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12048885,"byte_end":12048893,"line_start":5985,"line_end":5985,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4846},{"krate":0,"index":4848}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12065965,"byte_end":12065978,"line_start":6190,"line_end":6190,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4862},{"krate":0,"index":4864}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3158,"byte_end":3171,"line_start":122,"line_end":122,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2864},{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3738,"byte_end":3751,"line_start":148,"line_end":148,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4747,"byte_end":4754,"line_start":183,"line_end":183,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2876},{"krate":0,"index":2878},{"krate":0,"index":2880},{"krate":0,"index":2882},{"krate":0,"index":2884},{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2890},{"krate":0,"index":2892},{"krate":0,"index":2894},{"krate":0,"index":2896},{"krate":0,"index":2898},{"krate":0,"index":2900},{"krate":0,"index":2902},{"krate":0,"index":2904},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2910},{"krate":0,"index":2912},{"krate":0,"index":2914},{"krate":0,"index":2916},{"krate":0,"index":2918},{"krate":0,"index":2920},{"krate":0,"index":2922},{"krate":0,"index":2924},{"krate":0,"index":2926},{"krate":0,"index":2928},{"krate":0,"index":2930},{"krate":0,"index":2932},{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2938},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2952},{"krate":0,"index":2954},{"krate":0,"index":2956},{"krate":0,"index":2958},{"krate":0,"index":2960},{"krate":0,"index":2962}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34366,"byte_end":34380,"line_start":1051,"line_end":1051,"column_start":35,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34390,"byte_end":34404,"line_start":1053,"line_end":1053,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34774,"byte_end":34788,"line_start":1066,"line_end":1066,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37494,"byte_end":37502,"line_start":1152,"line_end":1152,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2980},{"krate":0,"index":2982},{"krate":0,"index":2984},{"krate":0,"index":2986},{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1923,"byte_end":1932,"line_start":70,"line_end":70,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":2780}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":48766,"byte_end":48772,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":3004},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":49060,"byte_end":49066,"line_start":36,"line_end":36,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":3004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69164,"byte_end":69170,"line_start":652,"line_end":652,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":3004},"to":{"krate":2,"index":2390}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69297,"byte_end":69303,"line_start":658,"line_end":658,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":3004},"to":{"krate":2,"index":2396}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69322,"byte_end":69328,"line_start":660,"line_end":660,"column_start":15,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":3004},"to":{"krate":2,"index":7980}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69560,"byte_end":69564,"line_start":672,"line_end":672,"column_start":20,"column_end":24},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":3012},"to":{"krate":2,"index":2390}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69687,"byte_end":69691,"line_start":678,"line_end":678,"column_start":13,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":3012},"to":{"krate":2,"index":2396}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69716,"byte_end":69720,"line_start":680,"line_end":680,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":3012},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70693,"byte_end":70704,"line_start":710,"line_end":710,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":3020},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71138,"byte_end":71142,"line_start":725,"line_end":725,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":3012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80200,"byte_end":80224,"line_start":1001,"line_end":1001,"column_start":6,"column_end":30},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":3064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80575,"byte_end":80598,"line_start":1020,"line_end":1020,"column_start":19,"column_end":42},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":280},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80975,"byte_end":80998,"line_start":1035,"line_end":1035,"column_start":28,"column_end":51},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":280},"to":{"krate":2,"index":4416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81287,"byte_end":81301,"line_start":1048,"line_end":1048,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82027,"byte_end":82041,"line_start":1072,"line_end":1072,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":292},"to":{"krate":2,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82479,"byte_end":82486,"line_start":1090,"line_end":1090,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83593,"byte_end":83616,"line_start":1128,"line_end":1128,"column_start":19,"column_end":42},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":314},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84311,"byte_end":84336,"line_start":1158,"line_end":1158,"column_start":19,"column_end":44},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":324},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85015,"byte_end":85019,"line_start":1185,"line_end":1185,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85806,"byte_end":85811,"line_start":1215,"line_end":1215,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86301,"byte_end":86306,"line_start":1231,"line_end":1231,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":342},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86428,"byte_end":86433,"line_start":1237,"line_end":1237,"column_start":15,"column_end":20},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":342},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86867,"byte_end":86882,"line_start":1259,"line_end":1259,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":356},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87005,"byte_end":87020,"line_start":1265,"line_end":1265,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91540,"byte_end":91555,"line_start":1392,"line_end":1392,"column_start":15,"column_end":30},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":356},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91792,"byte_end":91802,"line_start":1406,"line_end":1406,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92293,"byte_end":92303,"line_start":1422,"line_end":1422,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":382},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92710,"byte_end":92721,"line_start":1440,"line_end":1440,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93277,"byte_end":93288,"line_start":1458,"line_end":1458,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":394},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100845,"byte_end":100855,"line_start":1685,"line_end":1685,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":3094},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103209,"byte_end":103219,"line_start":1756,"line_end":1756,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":3094},"to":{"krate":2,"index":1958}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106121,"byte_end":106132,"line_start":72,"line_end":72,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":3116},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":106437,"byte_end":106448,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":3116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":128933,"byte_end":128955,"line_start":166,"line_end":166,"column_start":18,"column_end":40},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":3132},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":136638,"byte_end":136660,"line_start":344,"line_end":344,"column_start":40,"column_end":62},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":3132},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":144702,"byte_end":144709,"line_start":543,"line_end":543,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":1,"index":9280},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":147240,"byte_end":147257,"line_start":55,"line_end":55,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":3164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":148556,"byte_end":148573,"line_start":94,"line_end":94,"column_start":40,"column_end":57},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":3164},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":157266,"byte_end":157273,"line_start":318,"line_end":318,"column_start":58,"column_end":65},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":1,"index":9310},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":158933,"byte_end":158950,"line_start":39,"line_end":39,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":3222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":159734,"byte_end":159751,"line_start":63,"line_end":63,"column_start":40,"column_end":57},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":3222},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":162376,"byte_end":162383,"line_start":147,"line_end":147,"column_start":58,"column_end":65},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":1,"index":9310},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":112661,"byte_end":112666,"line_start":67,"line_end":67,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":112674,"byte_end":112679,"line_start":67,"line_end":67,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":8400},"to":{"krate":0,"index":682}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":164516,"byte_end":164522,"line_start":60,"line_end":60,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":3266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":166730,"byte_end":166742,"line_start":143,"line_end":143,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":3272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":167461,"byte_end":167466,"line_start":172,"line_end":172,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":3278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":168131,"byte_end":168136,"line_start":192,"line_end":192,"column_start":16,"column_end":21},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":3278},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":168648,"byte_end":168653,"line_start":211,"line_end":211,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":3278},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":169794,"byte_end":169803,"line_start":243,"line_end":243,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":170116,"byte_end":170124,"line_start":254,"line_end":254,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":3284},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":170741,"byte_end":170749,"line_start":277,"line_end":277,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":3284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":171960,"byte_end":171968,"line_start":322,"line_end":322,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":3284},"to":{"krate":0,"index":784}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":172781,"byte_end":172789,"line_start":360,"line_end":360,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":3290},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":173377,"byte_end":173385,"line_start":382,"line_end":382,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":3290},"to":{"krate":0,"index":784}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":181262,"byte_end":181272,"line_start":596,"line_end":596,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":3296},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":181379,"byte_end":181389,"line_start":602,"line_end":602,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":3296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":182337,"byte_end":182347,"line_start":629,"line_end":629,"column_start":16,"column_end":26},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":3296},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":183572,"byte_end":183581,"line_start":675,"line_end":675,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":784}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":184124,"byte_end":184129,"line_start":705,"line_end":705,"column_start":35,"column_end":40},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":3278},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":184540,"byte_end":184545,"line_start":718,"line_end":718,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":3278},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":185828,"byte_end":185832,"line_start":767,"line_end":767,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":3330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":188932,"byte_end":188940,"line_start":861,"line_end":861,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":3340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":208696,"byte_end":208704,"line_start":1363,"line_end":1363,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":209990,"byte_end":209998,"line_start":1405,"line_end":1405,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":210164,"byte_end":210172,"line_start":1413,"line_end":1413,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":210493,"byte_end":210501,"line_start":1425,"line_end":1425,"column_start":35,"column_end":43},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":212043,"byte_end":212051,"line_start":1472,"line_end":1472,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":213723,"byte_end":213731,"line_start":1519,"line_end":1519,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220006,"byte_end":220012,"line_start":35,"line_end":35,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":3370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220150,"byte_end":220156,"line_start":42,"line_end":42,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1406}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220346,"byte_end":220352,"line_start":48,"line_end":48,"column_start":35,"column_end":41},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":220549,"byte_end":220555,"line_start":56,"line_end":56,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":221434,"byte_end":221444,"line_start":84,"line_end":84,"column_start":27,"column_end":37},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":225880,"byte_end":225905,"line_start":205,"line_end":205,"column_start":31,"column_end":56},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1186},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":226285,"byte_end":226310,"line_start":221,"line_end":221,"column_start":18,"column_end":43},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":226784,"byte_end":226798,"line_start":238,"line_end":238,"column_start":12,"column_end":26},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":3432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289349,"byte_end":289355,"line_start":1783,"line_end":1783,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":3370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289510,"byte_end":289522,"line_start":1790,"line_end":1790,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":3486},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":289611,"byte_end":289623,"line_start":1796,"line_end":1796,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":3486},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291266,"byte_end":291277,"line_start":1849,"line_end":1849,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":3498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":291844,"byte_end":291855,"line_start":1871,"line_end":1871,"column_start":29,"column_end":40},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":3498},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":300060,"byte_end":300064,"line_start":36,"line_end":36,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":3540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":304666,"byte_end":304677,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":3548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":306497,"byte_end":306509,"line_start":25,"line_end":25,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":3596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":307890,"byte_end":307898,"line_start":67,"line_end":67,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":3614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":308785,"byte_end":308793,"line_start":105,"line_end":105,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":3614},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":309541,"byte_end":309544,"line_start":132,"line_end":132,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":3620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":313210,"byte_end":313221,"line_start":245,"line_end":245,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":3632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":318882,"byte_end":318890,"line_start":395,"line_end":395,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":3614},"to":{"krate":0,"index":2716}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":321088,"byte_end":321099,"line_start":461,"line_end":461,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":3632},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":321755,"byte_end":321766,"line_start":482,"line_end":482,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":3632},"to":{"krate":0,"index":1410}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":323656,"byte_end":323663,"line_start":85,"line_end":85,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":3644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":327994,"byte_end":328010,"line_start":93,"line_end":93,"column_start":14,"column_end":30},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":3686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":328451,"byte_end":328468,"line_start":116,"line_end":116,"column_start":14,"column_end":31},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":328723,"byte_end":328740,"line_start":128,"line_end":128,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1750},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329189,"byte_end":329195,"line_start":149,"line_end":149,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":2196}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329396,"byte_end":329400,"line_start":157,"line_end":157,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":2196}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329588,"byte_end":329596,"line_start":165,"line_end":165,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":3750},"to":{"krate":0,"index":2196}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":329980,"byte_end":329986,"line_start":179,"line_end":179,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":330249,"byte_end":330255,"line_start":187,"line_end":187,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1734}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":330863,"byte_end":330869,"line_start":203,"line_end":203,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1746}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331089,"byte_end":331093,"line_start":211,"line_end":211,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1746}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331295,"byte_end":331301,"line_start":219,"line_end":219,"column_start":16,"column_end":22},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":331513,"byte_end":331517,"line_start":229,"line_end":229,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":333384,"byte_end":333388,"line_start":273,"line_end":273,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1406}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":333582,"byte_end":333586,"line_start":279,"line_end":279,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":334169,"byte_end":334173,"line_start":299,"line_end":299,"column_start":32,"column_end":36},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":337677,"byte_end":337681,"line_start":402,"line_end":402,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":3696},"to":{"krate":2,"index":2622}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":337749,"byte_end":337753,"line_start":408,"line_end":408,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":3696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356245,"byte_end":356251,"line_start":927,"line_end":927,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356528,"byte_end":356532,"line_start":937,"line_end":937,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":356927,"byte_end":356933,"line_start":949,"line_end":949,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":658}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357065,"byte_end":357069,"line_start":955,"line_end":955,"column_start":20,"column_end":24},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":658}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357269,"byte_end":357273,"line_start":964,"line_end":964,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":357878,"byte_end":357884,"line_start":985,"line_end":985,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":358164,"byte_end":358168,"line_start":994,"line_end":994,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":358390,"byte_end":358398,"line_start":1002,"line_end":1002,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":3750},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":359746,"byte_end":359750,"line_start":1043,"line_end":1043,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":2720}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":379670,"byte_end":379674,"line_start":1555,"line_end":1555,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":380386,"byte_end":380390,"line_start":1573,"line_end":1573,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":1734}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":382578,"byte_end":382589,"line_start":1640,"line_end":1640,"column_start":19,"column_end":30},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":3744},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":383918,"byte_end":383926,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":3750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":386866,"byte_end":386874,"line_start":129,"line_end":129,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":3750},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":388410,"byte_end":388416,"line_start":28,"line_end":28,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":3756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":389595,"byte_end":389601,"line_start":74,"line_end":74,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":3774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390627,"byte_end":390633,"line_start":105,"line_end":105,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":3774},"to":{"krate":0,"index":1410}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":390875,"byte_end":390881,"line_start":114,"line_end":114,"column_start":35,"column_end":41},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":3774},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":391112,"byte_end":391118,"line_start":123,"line_end":123,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":3774},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":392251,"byte_end":392257,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":3810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":393005,"byte_end":393011,"line_start":62,"line_end":62,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":3810},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":393324,"byte_end":393330,"line_start":73,"line_end":73,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":3810},"to":{"krate":0,"index":2716}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":401646,"byte_end":401667,"line_start":204,"line_end":204,"column_start":6,"column_end":27},"kind":{"variant":"Impl","fields":[130]},"from":{"krate":0,"index":3820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":405305,"byte_end":405326,"line_start":302,"line_end":302,"column_start":19,"column_end":40},"kind":{"variant":"Impl","fields":[131]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":406511,"byte_end":406532,"line_start":336,"line_end":336,"column_start":32,"column_end":53},"kind":{"variant":"Impl","fields":[132]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":406987,"byte_end":407008,"line_start":350,"line_end":350,"column_start":16,"column_end":37},"kind":{"variant":"Impl","fields":[133]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":407864,"byte_end":407868,"line_start":20,"line_end":20,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[134]},"from":{"krate":0,"index":3832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":408104,"byte_end":408108,"line_start":30,"line_end":30,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[135]},"from":{"krate":0,"index":3832},"to":{"krate":2,"index":2630}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":414799,"byte_end":414806,"line_start":254,"line_end":254,"column_start":51,"column_end":58},"kind":{"variant":"Impl","fields":[136]},"from":{"krate":0,"index":1920},"to":{"krate":0,"index":2276}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":415397,"byte_end":415402,"line_start":272,"line_end":272,"column_start":51,"column_end":56},"kind":{"variant":"Impl","fields":[137]},"from":{"krate":0,"index":3906},"to":{"krate":0,"index":2276}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":416680,"byte_end":416687,"line_start":312,"line_end":312,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2612},"to":{"krate":0,"index":2294}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":416895,"byte_end":416898,"line_start":320,"line_end":320,"column_start":25,"column_end":28},"kind":{"variant":"Impl","fields":[138]},"from":{"krate":5,"index":4580},"to":{"krate":0,"index":2294}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":417075,"byte_end":417083,"line_start":330,"line_end":330,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[139]},"from":{"krate":5,"index":2260},"to":{"krate":0,"index":2294}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":417662,"byte_end":417663,"line_start":351,"line_end":351,"column_start":20,"column_end":21},"kind":{"variant":"Impl","fields":[140]},"from":{"krate":0,"index":647},"to":{"krate":0,"index":2312}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":419332,"byte_end":419345,"line_start":401,"line_end":401,"column_start":45,"column_end":58},"kind":{"variant":"Impl","fields":[141]},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":420501,"byte_end":420514,"line_start":437,"line_end":437,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[142]},"from":{"krate":0,"index":2328},"to":{"krate":0,"index":2312}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":421136,"byte_end":421149,"line_start":458,"line_end":458,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[143]},"from":{"krate":0,"index":2328},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":424253,"byte_end":424257,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[144]},"from":{"krate":0,"index":3912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433301,"byte_end":433305,"line_start":341,"line_end":341,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[145]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433752,"byte_end":433756,"line_start":355,"line_end":355,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[146]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":2196}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":433951,"byte_end":433959,"line_start":363,"line_end":363,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[147]},"from":{"krate":0,"index":3934},"to":{"krate":0,"index":2196}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":434285,"byte_end":434289,"line_start":375,"line_end":375,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[148]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":435091,"byte_end":435099,"line_start":401,"line_end":401,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[149]},"from":{"krate":0,"index":3934},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":438063,"byte_end":438067,"line_start":487,"line_end":487,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[150]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":438289,"byte_end":438297,"line_start":495,"line_end":495,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[151]},"from":{"krate":0,"index":3934},"to":{"krate":0,"index":2186}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":439454,"byte_end":439458,"line_start":529,"line_end":529,"column_start":35,"column_end":39},"kind":{"variant":"Impl","fields":[152]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":1424}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":440839,"byte_end":440843,"line_start":569,"line_end":569,"column_start":32,"column_end":36},"kind":{"variant":"Impl","fields":[153]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":1416}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":442480,"byte_end":442489,"line_start":623,"line_end":623,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[154]},"from":{"krate":0,"index":3918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":445317,"byte_end":445321,"line_start":722,"line_end":722,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[155]},"from":{"krate":0,"index":3912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":472070,"byte_end":472074,"line_start":1241,"line_end":1241,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[156]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":475129,"byte_end":475132,"line_start":45,"line_end":45,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[157]},"from":{"krate":0,"index":3976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":476148,"byte_end":476151,"line_start":89,"line_end":89,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[158]},"from":{"krate":0,"index":3976},"to":{"krate":0,"index":1450}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":476717,"byte_end":476720,"line_start":110,"line_end":110,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[159]},"from":{"krate":0,"index":3976},"to":{"krate":0,"index":2716}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":487372,"byte_end":487385,"line_start":54,"line_end":54,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[160]},"from":{"krate":0,"index":3986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":491709,"byte_end":491719,"line_start":172,"line_end":172,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[161]},"from":{"krate":0,"index":3992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":493470,"byte_end":493483,"line_start":236,"line_end":236,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[162]},"from":{"krate":0,"index":3986},"to":{"krate":0,"index":2322}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":495059,"byte_end":495064,"line_start":32,"line_end":32,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":2716}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":495503,"byte_end":495508,"line_start":43,"line_end":43,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":2720}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":497914,"byte_end":497922,"line_start":15,"line_end":15,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[163]},"from":{"krate":0,"index":4016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":499461,"byte_end":499469,"line_start":71,"line_end":71,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[164]},"from":{"krate":0,"index":4016},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503511,"byte_end":503516,"line_start":10,"line_end":10,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":8400},"to":{"krate":0,"index":2794}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":503519,"byte_end":503529,"line_start":10,"line_end":10,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":5550},"to":{"krate":0,"index":2794}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11503124,"byte_end":11503129,"line_start":680,"line_end":680,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[165]},"from":{"krate":0,"index":4996},"to":{"krate":2,"index":8404}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11503307,"byte_end":11503312,"line_start":685,"line_end":685,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[166]},"from":{"krate":0,"index":4996},"to":{"krate":1,"index":2466}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11505387,"byte_end":11505400,"line_start":737,"line_end":737,"column_start":10,"column_end":23},"kind":{"variant":"Impl","fields":[167]},"from":{"krate":0,"index":4072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11530050,"byte_end":11530069,"line_start":1040,"line_end":1040,"column_start":21,"column_end":40},"kind":{"variant":"Impl","fields":[168]},"from":{"krate":0,"index":5018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11546109,"byte_end":11546122,"line_start":1344,"line_end":1344,"column_start":11,"column_end":24},"kind":{"variant":"Impl","fields":[169]},"from":{"krate":0,"index":4342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548103,"byte_end":11548116,"line_start":1389,"line_end":1389,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[170]},"from":{"krate":0,"index":4342},"to":{"krate":2,"index":1924}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548255,"byte_end":11548268,"line_start":1396,"line_end":1396,"column_start":29,"column_end":42},"kind":{"variant":"Impl","fields":[171]},"from":{"krate":0,"index":4342},"to":{"krate":2,"index":1942}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11548408,"byte_end":11548425,"line_start":1402,"line_end":1402,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[172]},"from":{"krate":0,"index":4380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11549505,"byte_end":11549506,"line_start":1434,"line_end":1434,"column_start":16,"column_end":17},"kind":{"variant":"Impl","fields":[173]},"from":{"krate":16,"index":11260},"to":{"krate":0,"index":4392}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11550304,"byte_end":11550308,"line_start":1454,"line_end":1454,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[174]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11551426,"byte_end":11551432,"line_start":1484,"line_end":1484,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[175]},"from":{"krate":0,"index":3810},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11554253,"byte_end":11554256,"line_start":1548,"line_end":1548,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[176]},"from":{"krate":0,"index":3976},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11564761,"byte_end":11564765,"line_start":1668,"line_end":1668,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[177]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11570819,"byte_end":11570825,"line_start":1793,"line_end":1793,"column_start":11,"column_end":17},"kind":{"variant":"Impl","fields":[178]},"from":{"krate":0,"index":4440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11571070,"byte_end":11571076,"line_start":1801,"line_end":1801,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[179]},"from":{"krate":0,"index":4440},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11571833,"byte_end":11571839,"line_start":1817,"line_end":1817,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[180]},"from":{"krate":0,"index":4440},"to":{"krate":0,"index":1730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11572039,"byte_end":11572045,"line_start":1823,"line_end":1823,"column_start":27,"column_end":33},"kind":{"variant":"Impl","fields":[181]},"from":{"krate":0,"index":4440},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11572280,"byte_end":11572301,"line_start":1833,"line_end":1833,"column_start":24,"column_end":45},"kind":{"variant":"Impl","fields":[182]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11602706,"byte_end":11602720,"line_start":2061,"line_end":2061,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[183]},"from":{"krate":0,"index":4480},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11602800,"byte_end":11602814,"line_start":2064,"line_end":2064,"column_start":19,"column_end":33},"kind":{"variant":"Impl","fields":[184]},"from":{"krate":0,"index":4480},"to":{"krate":2,"index":4256}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11603628,"byte_end":11603633,"line_start":2089,"line_end":2089,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[185]},"from":{"krate":0,"index":3278},"to":{"krate":0,"index":4492}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11604772,"byte_end":11604781,"line_start":2116,"line_end":2116,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[186]},"from":{"krate":0,"index":3302},"to":{"krate":0,"index":4492}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11666196,"byte_end":11666208,"line_start":2579,"line_end":2579,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[187]},"from":{"krate":0,"index":3272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11675881,"byte_end":11675889,"line_start":2681,"line_end":2681,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[188]},"from":{"krate":0,"index":3284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11693820,"byte_end":11693832,"line_start":2853,"line_end":2853,"column_start":32,"column_end":44},"kind":{"variant":"Impl","fields":[189]},"from":{"krate":0,"index":3272},"to":{"krate":0,"index":4492}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11704775,"byte_end":11704783,"line_start":3011,"line_end":3011,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[190]},"from":{"krate":0,"index":3284},"to":{"krate":0,"index":4492}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11800944,"byte_end":11800952,"line_start":3635,"line_end":3635,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[191]},"from":{"krate":0,"index":3340},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11914876,"byte_end":11914882,"line_start":4499,"line_end":4499,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[192]},"from":{"krate":0,"index":3266},"to":{"krate":0,"index":4652}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":11934757,"byte_end":11934768,"line_start":4745,"line_end":4745,"column_start":11,"column_end":22},"kind":{"variant":"Impl","fields":[193]},"from":{"krate":0,"index":4680},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12004548,"byte_end":12004552,"line_start":5258,"line_end":5258,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[194]},"from":{"krate":0,"index":3540},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12014525,"byte_end":12014536,"line_start":5468,"line_end":5468,"column_start":17,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":4714},"to":{"krate":0,"index":4722}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12014949,"byte_end":12014950,"line_start":5480,"line_end":5480,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[195]},"from":{"krate":0,"index":1823},"to":{"krate":0,"index":4722}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12015846,"byte_end":12015857,"line_start":5499,"line_end":5499,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":4730},"to":{"krate":0,"index":4736}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12015860,"byte_end":12015871,"line_start":5499,"line_end":5499,"column_start":42,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":4714},"to":{"krate":0,"index":4736}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12016105,"byte_end":12016106,"line_start":5506,"line_end":5506,"column_start":37,"column_end":38},"kind":{"variant":"Impl","fields":[196]},"from":{"krate":0,"index":1827},"to":{"krate":0,"index":4736}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018090,"byte_end":12018101,"line_start":5545,"line_end":5545,"column_start":25,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":4730},"to":{"krate":0,"index":4748}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018104,"byte_end":12018112,"line_start":5545,"line_end":5545,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":4722},"to":{"krate":0,"index":4748}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018317,"byte_end":12018318,"line_start":5552,"line_end":5552,"column_start":34,"column_end":35},"kind":{"variant":"Impl","fields":[197]},"from":{"krate":0,"index":1833},"to":{"krate":0,"index":4748}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018764,"byte_end":12018770,"line_start":5566,"line_end":5566,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[198]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":4714}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12018983,"byte_end":12018989,"line_start":5576,"line_end":5576,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[199]},"from":{"krate":0,"index":3370},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019206,"byte_end":12019210,"line_start":5586,"line_end":5586,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[200]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":4714}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019426,"byte_end":12019430,"line_start":5596,"line_end":5596,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[201]},"from":{"krate":0,"index":3696},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019650,"byte_end":12019654,"line_start":5606,"line_end":5606,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[202]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":4714}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12019882,"byte_end":12019886,"line_start":5616,"line_end":5616,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[203]},"from":{"krate":0,"index":3912},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12044676,"byte_end":12044697,"line_start":5898,"line_end":5898,"column_start":22,"column_end":43},"kind":{"variant":"Impl","fields":[204]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":4714}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12044942,"byte_end":12044963,"line_start":5908,"line_end":5908,"column_start":22,"column_end":43},"kind":{"variant":"Impl","fields":[205]},"from":{"krate":0,"index":3820},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12047652,"byte_end":12047663,"line_start":5954,"line_end":5954,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[206]},"from":{"krate":0,"index":3632},"to":{"krate":0,"index":4730}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12048885,"byte_end":12048893,"line_start":5985,"line_end":5985,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[207]},"from":{"krate":0,"index":3614},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,87,111,114,107,98,101,110,99,104,47,106,97,100,101,45,115,105,103,110,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,98,117,105,108,100,47,98,105,110,100,103,101,110,45,97,102,101,100,100,55,49,53,97,49,98,50,102,50,52,51,47,111,117,116,47,99,111,100,101,103,101,110,46,114,115],"byte_start":12065965,"byte_end":12065978,"line_start":6190,"line_end":6190,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[208]},"from":{"krate":0,"index":3986},"to":{"krate":0,"index":4400}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3158,"byte_end":3171,"line_start":122,"line_end":122,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[209]},"from":{"krate":0,"index":5086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3738,"byte_end":3751,"line_start":148,"line_end":148,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[210]},"from":{"krate":0,"index":5086},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4747,"byte_end":4754,"line_start":183,"line_end":183,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[211]},"from":{"krate":0,"index":5096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34366,"byte_end":34380,"line_start":1051,"line_end":1051,"column_start":35,"column_end":49},"kind":{"variant":"Impl","fields":[212]},"from":{"krate":0,"index":5106},"to":{"krate":1,"index":5550}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34390,"byte_end":34404,"line_start":1053,"line_end":1053,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[213]},"from":{"krate":0,"index":5106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34774,"byte_end":34788,"line_start":1066,"line_end":1066,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[214]},"from":{"krate":0,"index":5106},"to":{"krate":2,"index":2612}},{"span":{"file_name":[47,104,111,109,101,47,107,50,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,50,57,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37494,"byte_end":37502,"line_start":1152,"line_end":1152,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[215]},"from":{"krate":0,"index":5160},"to":{"krate":4294967295,"index":4294967295}}]}