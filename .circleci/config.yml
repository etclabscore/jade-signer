version: 2.1

orbs:
  win: circleci/windows@1.0.0

aliases:
  # -------------------------
  #      ALIASES: Caches
  # -------------------------
  - &restore-deps-cache-ububtu
    key: rust-cache-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}

  - &save-deps-cache-ubuntu
    key: rust-cache-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}
    paths:
      - /usr/local/cargo/registry
      - /usr/local/rustup
      - ~/project/target/

  - &restore-deps-cache-rustup
    key: rust-cache-musl-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}

  - &save-deps-cache-rustup
    key: rust-cache-musl-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}
    paths:
      - $HOME/.rustup/
      - $HOME/.cargo/
      - $HOME/project/target/

  - &restore-deps-cache-windows
    key: rust-cache-win-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}

  - &save-deps-cache-windows
    key: rust-cache-win-{{ arch }}-{{ checksum "Cargo.toml" }}-{{ .Environment.CIRCLE_JOB }}
    paths:
      - $HOME/project/target/
  # -------------------------
  #  ALIASES: Branch Filters
  # -------------------------
  - &filter-only-master
    branches:
      only: master
  - &filter-only-semantic-pr
    branches:
      only:  /^(pull|fix|feat|chore)\/.*$/

defaults: &defaults
  working_directory: ~/project
  environment:
    RUST_BACKTRACE: 1

jobs:
  test-linux:
    <<: *defaults
    docker:
      - image: rust:latest
    resource_class: large
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-ububtu
      - run: apt update && apt install -y cmake clang libclang-dev
      - run:
          name: Install Rust tools
          command: |
            rustup component add clippy
            rustup component add rustfmt
      - run:
          name: Install open-rpc-test-coverage
          command: |
            curl -sL https://deb.nodesource.com/setup_12.x | bash -
            apt-get install -y nodejs
            npm install -g @open-rpc/test-coverage --unsafe-perm=true --allow-root
      - run:
          command: cargo test --all
          no_output_timeout: 1h
      - save_cache: *save-deps-cache-ubuntu
      - run: cargo clippy
      - run: cargo fmt -- --check

  build-linux:
    <<: *defaults
    docker:
      - image: rust:latest
    resource_class: large
    steps:
      - checkout
      - run: apt update && apt install -y cmake clang libclang-dev
      - restore_cache: *restore-deps-cache-rustup
      - run: cargo build --release
      - save_cache: *save-deps-cache-rustup
      - run:
          name: Move binaries into bin/ directory
          command: |
            mkdir bin/
            mv target/release/jade-signer ./bin/jade-signer-linux
      - persist_to_workspace:
          root: .
          paths:
            - bin/*

  test-macos:
    <<: *defaults
    macos:
      xcode: "10.2.1"
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rustup
      - run:
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
      - run:
          name: Install open-rpc-test-coverage
          command: |
            npm install -g @open-rpc/test-coverage
      - run:
          command: source $HOME/.cargo/env && cargo test --all
          no_output_timeout: 1h
      - save_cache: *save-deps-cache-rustup

  build-macos:
    <<: *defaults
    macos:
      xcode: "10.2.1"
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-rustup
      - run:
          name: Install Rust
          command: curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
      - run: source $HOME/.cargo/env && cargo build --release
      - save_cache: *save-deps-cache-rustup
      - run:
         name: Move binaries into bin/ directory
         command: |
           mkdir bin/
           mv target/release/jade-signer ./bin/jade-signer-macos
      - persist_to_workspace:
         root: .
         paths:
           - bin/*

  build-windows:
    executor: win/vs2019
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-windows
      - run:
          name: Install Chocolatey
          command: |
            Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - run:
          name: Install Dependencies
          command: |
            choco install rust-ms
            choco install llvm
      - run:
          name: Build jade-signer
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
          command: |
            cargo build --release
      - save_cache: *save-deps-cache-windows
      - run:
          name: Move binaries into bin/ directory
          command: |
            mkdir bin/
            mv target/release/jade-signer.exe ./bin/jade-signer-windows.exe
      - persist_to_workspace:
          root: .
          paths:
            - bin/*

  test-windows:
    executor: win/vs2019
    steps:
      - checkout
      - restore_cache: *restore-deps-cache-windows
      - run:
          name: Install Chocolatey
          command: |
            Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - run:
          name: Install Dependencies
          command: |
            choco install rust-ms
            choco install llvm
      - run:
          name: Test jade-signer
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
          command: |
            cargo test --all
      - save_cache: *save-deps-cache-windows

  codecov:
    <<: *defaults
    machine: true
    resource_class: medium
    steps:
      - checkout
      - run: apt update && apt install -y cmake clang libclang-dev
      - restore_cache: *restore-deps-cache-rustup
      - run:
          name: Install Rust
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Tarpaulin
          command: cargo tarpaulin --version || cargo install cargo-tarpaulin
          environment:
            RUSTFLAGS: --cfg procmacro2_semver_exempt
      - run:
          name: Generate coverage report
          command: cargo tarpaulin --out Xml --all-features
      - save_cache: *save-deps-cache-rustup
      - run:
          name: Upload to codecov.io
          command: bash <(curl -s https://codecov.io/bash) -Z -f cobertura.xml

  release-dry:
    <<: *defaults
    docker:
      - image: etclabscore/semantic-rs
    steps:
      - setup_remote_docker
      - run: apt update && apt install -y cmake clang libclang-dev
      - checkout
      - attach_workspace:
          at: /workspace
      - run: semantic-rs --dry

  release:
    <<: *defaults
    docker:
      - image: etclabscore/semantic-rs
    steps:
      - setup_remote_docker
      - run: apt update && apt install -y cmake clang libclang-dev
      - checkout
      - attach_workspace:
          at: /workspace
      - restore_cache: *restore-deps-cache-ububtu
      # This unset is VERY important: without it --force-https cannot work
      # For some reason CircleCI has a global override substituting git@ links instead of all https links
      - run: git config --global --unset url.ssh://git@github.com.insteadof
      - run: semantic-rs
      - save_cache: *save-deps-cache-ubuntu


workflows:
  version: 2
  analysis:
    jobs:
      - test-linux:
          filters: *filter-only-semantic-pr
      - test-macos:
          filters: *filter-only-semantic-pr
      - test-windows:
          filters: *filter-only-semantic-pr
      - build-linux:
          filters: *filter-only-semantic-pr
      - build-macos:
          filters: *filter-only-semantic-pr
      - build-windows:
          filters: *filter-only-semantic-pr
      - release-dry:
          filters: *filter-only-semantic-pr
          requires:
            - build-linux
            - build-macos
            - build-windows

  release:
    jobs:
      - test-linux:
          filters: *filter-only-master
      - test-macos:
          filters: *filter-only-master
      - test-windows:
          filters: *filter-only-master
      - build-linux:
          filters: *filter-only-master
      - build-macos:
          filters: *filter-only-master
      - build-windows:
          filters: *filter-only-master
      - release-dry:
          filters: *filter-only-master
          requires:
            - build-linux
            - build-macos
            - build-windows
      - hold:
          filters: *filter-only-master
          type: approval
          requires:
            - test-linux
            - test-macos
            - test-windows
            - release-dry
      - release:
          filters: *filter-only-master
          requires:
            - hold
